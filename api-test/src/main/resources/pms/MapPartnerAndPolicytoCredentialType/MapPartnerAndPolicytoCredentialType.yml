MapPartnerAndPolicytoCredentialType:
   Pms_MapPartnerAndPolicytoCredentialType_AllValid_smoke:
      endPoint: /v1/partnermanager/partners/{partnerId}/credentialtype/{credentialType}/policies/{policyId}
      uniqueIdentifier: TC_PMS_MapPartnerAndPolicytoCredentialType_01
      description: Create Mapping between Partner and Policy to CredentialType Partner
      role: partneradmin
      checkErrorsOnlyInResponse: true
      restMethod: post
      inputTemplate: pms/MapPartnerAndPolicytoCredentialType/mapPartnerAndPolicytoCredentialType
      outputTemplate: pms/MapPartnerAndPolicytoCredentialType/mapPartnerAndPolicytoCredentialTypeResult
      input: '{
    "partnerId": "pms-111999",
    "credentialType": "auth",
    "policyId": "mosip policy"
}'
      output: '{
}'
   Pms_MapPartnerAndPolicytoCredentialType_InValid_partnerId:
      endPoint: /v1/partnermanager/partners/{partnerId}/credentialtype/{credentialType}/policies/{policyId}
      uniqueIdentifier: TC_PMS_MapPartnerAndPolicytoCredentialType_02
      description: Create Mapping between Partner and Policy to CredentialType Partner while keeping invalid PartnerId
      role: partner
      restMethod: post
      inputTemplate: pms/MapPartnerAndPolicytoCredentialType/mapPartnerAndPolicytoCredentialType
      outputTemplate: pms/error
      input: '{
    "partnerId": "asvgasfbkasdm",
    "credentialType": "auth",
    "policyId": "mpolicy-default-auth"
}'
      output: '{
   "errors": [
    {
      "errorCode": "PMS_PRT_005"
    }
  ]      
}'
   Pms_MapPartnerAndPolicytoCredentialType_InValid_policyId:
      endPoint: /v1/partnermanager/partners/{partnerId}/credentialtype/{credentialType}/policies/{policyId}
      uniqueIdentifier: TC_PMS_MapPartnerAndPolicytoCredentialType_03
      description: Create Mapping between Partner and Policy to CredentialType Partner while keeping invalid PolicyId
      role: partner
      restMethod: post
      inputTemplate: pms/MapPartnerAndPolicytoCredentialType/mapPartnerAndPolicytoCredentialType
      outputTemplate: pms/error
      input: '{
    "partnerId": "mpartner-default-auth",
    "credentialType": "auth",
    "policyId": "asrhtaeh"
}'
      output: '{
   "errors": [
    {
      "errorCode": "PMS_PRT_073"
    }
  ]      
}'
   Pms_MapPartnerAndPolicytoCredentialType_InValid_credentialType:
      endPoint: /v1/partnermanager/partners/{partnerId}/credentialtype/{credentialType}/policies/{policyId}
      uniqueIdentifier: TC_PMS_MapPartnerAndPolicytoCredentialType_04
      description: Create Mapping between Partner and Policy to CredentialType Partner while keeping invalid CredentialType
      role: partner
      restMethod: post
      inputTemplate: pms/MapPartnerAndPolicytoCredentialType/mapPartnerAndPolicytoCredentialType
      outputTemplate: pms/error
      input: '{
    "partnerId": "mpartner-default-auth",
    "credentialType": "sfdgsaefhb",
    "policyId": "mpolicy-default-auth"
}'
      output: '{
   "errors": [
    {
      "errorCode": "PMS_PRT_072"
    }
  ]      
}'

   Pms_MapPartnerAndPolicytoCredentialType_MapTo_Inactive_Policy_Neg:
      endPoint: /v1/partnermanager/partners/{partnerId}/credentialtype/{credentialType}/policies/{policyId}
      uniqueIdentifier: TC_PMS_MapPartnerAndPolicytoCredentialType_05
      description: Create Mapping between Partner and Policy to CredentialType Partner while keeping invalid inactive Policy
      role: partner
      restMethod: post
      inputTemplate: pms/MapPartnerAndPolicytoCredentialType/mapPartnerAndPolicytoCredentialType
      outputTemplate: pms/error
      input: '{
    "partnerId": "MISP3",
    "credentialType": "auth",
    "policyId": "$ID:DefinePolicy_All_Valid_Smoke_For_Get_ApiKey_with_deactivated_sid_id$"
}'
      output: '{
       "errors": [
    {
      "errorCode": "PMS_PMP_016"
    }
  ]  
}'

   Pms_MapPartnerAndPolicytoCredentialType_Map_Again_Dublicate_Neg:
      endPoint: /v1/partnermanager/partners/{partnerId}/credentialtype/{credentialType}/policies/{policyId}
      uniqueIdentifier: TC_PMS_MapPartnerAndPolicytoCredentialType_06
      description: Create Mapping between Partner and Policy to CredentialType Partner while keeping duplicate PartnerId
      role: partneradmin
      restMethod: post
      inputTemplate: pms/MapPartnerAndPolicytoCredentialType/mapPartnerAndPolicytoCredentialType
      outputTemplate: pms/error
      input: '{
    "partnerId": "pms-111999",
    "credentialType": "auth",
    "policyId": "mosip policy"
}'
      output: '{
       "errors": [
    {
      "errorCode": "PMS_PRT_007"
    }
  ]
}'