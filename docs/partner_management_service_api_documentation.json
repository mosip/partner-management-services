{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0",
    "title": "Partner Management Services API documentation",
    "description": "Partner Management Services API documentation ",
    "license": {
      "url": "https://docs.mosip.io/platform/license",
      "name": "Mosip"
    }
  },
  "servers": [
    {
      "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
      "description": "Partner Management Service"
    }
  ],
  "paths": {
    "/securebiometricinterface": {
      "get": {
        "tags": [
          "secure-biometric-interface-controller"
        ],
        "summary": "NEW: Get the list of all the SBI details created by Device Providers",
        "description": "This endpoint is for both regular users and the Partner Admin users.\r\n\r\nThis endpoint supports pagination, sorting, and filtering based on optional query parameters.\r\n\r\nIf the token used to access this endpoint, does not have the PARTNER_ADMIN role, then it will fetch all the SBI's created by all the Device Providers associated with the logged in user only.\r\n\r\nIf the token used to access this endpoint, has PARTNER_ADMIN role, then it will fetch all the SBI's created by all the Device Providers across all users.\r\n\r\nThis endpoint is designed to support the upcoming feature \"Multi Partner Type Support for a User\".\r\nWith this feature one PMS user account will be able to support multiple Partner Types.\r\nCurrently one PMS user account maps to one Partner Type and one Partner Id.  \r\n\r\nThis endpoint upgrades the earlier GET endpoint `/partners/securebiometricinterface/search` \r\nby adding new features like:\r\n1. Performance improvement\r\n2. Handling `deactivated` status\r\n3. Adding details of associated devices (`countOfAssociatedDevices, countOfApprovedDevices, countOfPendingDevices`)\r\n\r\nThis endpoint should be configured for the Roles: DEVICE_PROVIDER, PARTNER_ADMIN",
        "operationId": "secure-biometric-interface-get",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortFieldName",
            "in": "query",
            "description": "Optional request parameter. Can be used to sort the response by the sortFieldName. Sorting parameters should be given along with pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortType",
            "in": "query",
            "description": "Optional request parameter. Can be used to sort the response with this sort order. Default is asc order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "Page Number for the pagination. Starts with 0.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page Size for the pagination. Page Number and Page Size should be given together in the request.",
            "schema": {
              "type": "integer",
              "default": 8
            }
          },
          {
            "name": "partnerId",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given partnerId.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgName",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given orgName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given status of the SBI. Allowed values are approved, rejected, pending_approval, deactivated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sbiExpiryStatus",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given sbiExpiryStatus. Allowed values are expired, valid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sbiVersion",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given SBI version.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sbiId",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given SBI id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique id required to access this endpoint \r\n`mosip.pms.all.sbi.details.get`"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of this endpoint. \r\n`1.0`"
                    },
                    "responseTime": {
                      "type": "string",
                      "description": "Date in ISO format indicating date time when response was sent",
                      "format": "date-time"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Optional metadata about the response"
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "pageNo": {
                          "type": "integer",
                          "description": "Page Number of the data in the response"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "Page Size of the data in the response"
                        },
                        "totalResults": {
                          "type": "integer",
                          "description": "Total number of records across all the pages in the response"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "partnerId": {
                                "type": "string",
                                "description": "Unique identifier for the Partner"
                              },
                              "orgName": {
                                "type": "string",
                                "description": "Name of the Organisation"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "rejected",
                                  "pending_approval",
                                  "approved",
                                  "deactivated"
                                ],
                                "description": "Status of the SBI"
                              },
                              "createdDateTime": {
                                "type": "string",
                                "description": "Created date in ISO format"
                              },
                              "sbiId": {
                                "type": "string",
                                "description": "Unique identifier of the SBI"
                              },
                              "sbiVersion": {
                                "type": "string",
                                "description": "Version of the SBI"
                              },
                              "isActive": {
                                "type": "boolean",
                                "description": "Flag indicating if SBI is active or not"
                              },
                              "sbiCreatedDateTime": {
                                "type": "string",
                                "description": "SBI Created date in ISO format"
                              },
                              "sbiExpiryDateTime": {
                                "type": "string",
                                "description": "SBI Expiry date in ISO format"
                              },
                              "sbiExpiryStatus": {
                                "type": "boolean",
                                "description": "Flag indicating if SBI has expired or not"
                              },
                              "countOfAssociatedDevices": {
                                "type": "integer",
                                "description": "Count of all associated devices with this SBI"
                              },
                              "countOfApprovedDevices": {
                                "type": "integer",
                                "description": "Count of all approved devices with this SBI"
                              },
                              "countOfPendingDevices": {
                                "type": "integer",
                                "description": "Count of all pending for approval devices with this SBI"
                              }
                            }
                          }
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Aray of error code and message indicating the error that has occured",
                        "properties": {
                          "errorCode": {
                            "type": "string",
                            "description": "Unique code of the error indicating the error that has occured"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message indicating the error that has occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      },
      "post": {
        "tags": [
          "secure-biometric-interface-controller"
        ],
        "summary": "EXISTING: Endpoint to save SecureBiometricInterface details",
        "description": "Saves SecureBiometricInterface details and return SBI id",
        "operationId": "SecureBiometricInterface",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperSecureBiometricInterfaceCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperIdDto"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      },
      "patch": {
        "tags": [
          "secure-biometric-interface-controller"
        ],
        "summary": "EXISTING: Service to approve/reject SecureBiometricInterface",
        "description": "Approve SecureBiometricInterface and returns success message",
        "operationId": "approveSecureBiometricInterface",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperSecureBiometricInterfaceStatusUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperString"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/devicedetail": {
      "get": {
        "tags": [
          "device-detail-controller"
        ],
        "summary": "NEW: Get the list of all the Devices created by all the Partners",
        "description": "This endpoint is for the Partner Admin users only.\r\n\r\nThis endpoint can be used to get the list of all the Devices created by all the Partners.\r\n\r\nThis endpoint upgrades the earlier GET endpoint `/devicedetail/search` by adding new features like:\r\n1. Performance improvement\r\n2. Handling deactivated status\r\n3. SBI id and SBI version\r\n\r\nThis endpoint should be configured for the Role: PARTNER_ADMIN",
        "operationId": "get-devicedetail",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortFieldName",
            "in": "query",
            "description": "Optional request parameter. Can be used to sort the response by the sortFieldName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortType",
            "in": "query",
            "description": "Optional request parameter. Can be used to sort the response with this sort order. Default is asc order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "Page Number for the pagination. Starts with 0.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page Size for the pagination. Default is 8.",
            "schema": {
              "type": "integer",
              "default": 8
            }
          },
          {
            "name": "partnerId",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given partnerId.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgName",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given orgName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given status of the device. Allowed values as approved, rejected, pending_approval, deactivated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceType",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given deviceType.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceSubType",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given deviceSubType.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "make",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given make.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "model",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given model.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sbiVersion",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given SBI version.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sbiId",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given SBI ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given Device ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique id required to access this endpoint `mosip.pms.get.all.device.details.get`"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of this endpoint. \r\n`1.0`"
                    },
                    "responseTime": {
                      "type": "string",
                      "description": "Date in ISO format indicating date time when response was sent",
                      "format": "date-time"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Optional metadata about the response"
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "pageNo": {
                          "type": "integer",
                          "description": "Page Number of the data in the response"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "Page Size of the data in the response"
                        },
                        "totalResults": {
                          "type": "integer",
                          "description": "Total number of records across all the pages in the response"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "partnerId": {
                                "type": "string",
                                "description": "Unique identifier for the Partner"
                              },
                              "orgName": {
                                "type": "string",
                                "description": "Name of the Organisation"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "rejected",
                                  "pending_approval",
                                  "approved",
                                  "deactivated"
                                ],
                                "description": "Status of the Device"
                              },
                              "createdDateTime": {
                                "type": "string",
                                "description": "Created date in ISO format"
                              },
                              "deviceId": {
                                "type": "string",
                                "description": "Unique identifier of the Device"
                              },
                              "make": {
                                "type": "string",
                                "description": "Make of the Device"
                              },
                              "model": {
                                "type": "string",
                                "description": "Model of the Device"
                              },
                              "deviceType": {
                                "type": "string",
                                "enum": [
                                  "Face",
                                  "Finger",
                                  "Iris"
                                ],
                                "description": "Type of the Device"
                              },
                              "deviceSubType": {
                                "type": "string",
                                "enum": [
                                  "Full face",
                                  "Single",
                                  "Slap",
                                  "Touchless",
                                  "Double"
                                ],
                                "description": "Sub Type of the Device"
                              },
                              "sbiId": {
                                "$ref": "#/components/schemas/sbiId",
                                "description": "Unique identifier of the associated SBI"
                              },
                              "sbiVersion": {
                                "$ref": "#/components/schemas/sbiVersion",
                                "description": "Version of the associated SBI"
                              }
                            }
                          }
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Aray of error code and message indicating the error that has occured",
                        "properties": {
                          "errorCode": {
                            "type": "string",
                            "description": "Unique code of the error indicating the error that has occured"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message indicating the error that has occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/devicedetail/deviceType/filtervalues": {
      "post": {
        "tags": [
          "device-detail-controller"
        ],
        "summary": "EXISTING: Endpoint to filter DeviceTypes",
        "description": "Endpoint to filter DeviceTypes",
        "operationId": "filterDeviceType",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperDeviceFilterValueDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperFilterResponseCodeDto"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/devicedetail/deviceSubType/filtervalues": {
      "post": {
        "tags": [
          "device-detail-controller"
        ],
        "summary": "EXISTING: Endpoint to filter DeviceSubTypes",
        "description": "Endpoint to filter DeviceSubTypes",
        "operationId": "filterDeviceSubType",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperDeviceFilterValueDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperFilterResponseCodeDto"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/partners": {
      "post": {
        "tags": [
          "partner-service-controller"
        ],
        "summary": "EXISTING: partner self registration",
        "description": "Saves partner details",
        "operationId": "partnerSelfRegistration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperPartnerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPartnerResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/partners/{partnerId}/policy/{policyId}/apiKey/status": {
      "patch": {
        "tags": [
          "partner-management-controller"
        ],
        "summary": "EXISTING: Endpoint to activate/de-activate partner api key",
        "description": "Endpoint to activate/de-activate partner api key",
        "operationId": "activateDeactivatePartnerAPIKey",
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperAPIkeyStatusUpdateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperString"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/partners/{partnerId}/certificate-data": {
      "get": {
        "tags": [
          "partner-service-controller",
          "NEW"
        ],
        "summary": "NEW: Get both the certificates, partner uploaded CA signed certificate and the PMS generated MOSIP signed certificate",
        "description": "This endpoint will fetch  both the certificates, CA signed certifacte uploaded by the partner \r\nand the MOSIP signed certificate, which is generated by PMS after the CA signed certificate \r\nis uploaded by the partner.\r\n\r\nThis endpoint will use Kernel Key Manager service endpoint `getPartnerSignedCertificate/{$partnerCertId}` \r\nto get the certificates.\r\n\r\nThis endpoint should be configured for the all the Roles: AUTH_PARTNER,ABIS_PARTNER,SDK_PARTNER,\r\nDEVICE_PROVIDER,FTM_PROVIDER,CREDENTIAL_PARTNER,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER",
        "operationId": "certificate-data",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partnerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperOriginalCertDownloadResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/partners/{partnerId}/policy/map": {
      "post": {
        "tags": [
          "partner-service-controller"
        ],
        "summary": "EXISTING: To request for policy mapping",
        "description": "To request for policy mapping",
        "operationId": "mapPolicyToPartner",
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperPartnerPolicyMappingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPartnerPolicyMappingResponseDto"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/partners/partnertype/search": {
      "post": {
        "tags": [
          "partner-service-controller"
        ],
        "summary": "EXISTING: Endpoint to search partner types",
        "description": "Endpoint to search partner types",
        "operationId": "searchPartnerType",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperSearchDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPageResponseDtoPartnerType"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/partners/{partnerId}/generate/apikey": {
      "patch": {
        "tags": [
          "partner-service-controller"
        ],
        "summary": "EXISTING: To generate apiKeys for approved policies",
        "description": "To generate apiKeys for approved policies",
        "operationId": "generateAPIKey",
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperAPIKeyGenerateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperAPIKeyGenerateResponseDto"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/partners/policy/{mappingkey}": {
      "put": {
        "tags": [
          "partner-management-controller"
        ],
        "summary": "EXISTING: Endpoint to approve/reject partner policy mapping",
        "description": "Endpoint to approve/reject partner policy mapping",
        "operationId": "approveRejectPolicyMappings",
        "parameters": [
          {
            "name": "mappingkey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperStatusRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperString"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/securebiometricinterface/{sbiId}/devices": {
      "get": {
        "tags": [
          "secure-biometric-interface-controller"
        ],
        "summary": "NEW: Get list of all the devices associated with the given SBI Id",
        "description": "This endpoint will fetch the list of all the devices associated with the given SBI Id.\r\nThis endpoint will validate that the given SBI id belongs to the logged in user or not.\r\n\r\nIf there are no devices associated with the given SBI Id, \r\nthen it will return an empty array as the response along with the id, \r\nversion, responsetime and metadata (optional) attributes.\r\n\r\nThis endpoint should be configured for the Roles: DEVICE_PROVIDER,PARTNER_ADMIN",
        "operationId": "sbi-devices",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sbiId",
            "in": "path",
            "description": "Unique identifier of the SBI",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier required to access this endpoint `mosip.pms.sbi.devices.get`"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of the endpoint `1.0`"
                    },
                    "responseTime": {
                      "type": "string",
                      "description": "Date in ISO format indicating when response was sent"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Optional metadata about response"
                    },
                    "response": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier of the Device"
                          },
                          "deviceTypeCode": {
                            "type": "string",
                            "description": "Type of the Device"
                          },
                          "deviceSubTypeCode": {
                            "type": "string",
                            "description": "Subtype of the Device"
                          },
                          "deviceProviderId": {
                            "type": "string",
                            "description": "Unique identifier of the Device Provider / Partner"
                          },
                          "make": {
                            "type": "string",
                            "description": "Make details of the Device"
                          },
                          "model": {
                            "type": "string",
                            "description": "Model details of the Device"
                          },
                          "isActive": {
                            "type": "boolean",
                            "description": "Flag indicating if Device is active or noy"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "pending_approval",
                              "approved",
                              "rejected"
                            ],
                            "description": "Status of the Device"
                          },
                          "createdDateTime": {
                            "type": "string",
                            "description": "Date in ISO format indicating when Device was created by the Partner"
                          }
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "description": "Optional array of errors encountered while processing the request",
                      "items": {
                        "type": "object",
                        "properties": {
                          "errorCode": {
                            "type": "string",
                            "description": "Unique identifier of the error"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message with details about the error"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "id": "string",
                      "version": "string",
                      "responseTime": "2019-08-24T14:15:22Z",
                      "metadata": {},
                      "response": [
                        {
                          "id": "string",
                          "deviceTypeCode": "string",
                          "deviceSubTypeCode": "string",
                          "deviceProviderId": "string",
                          "make": "string",
                          "model": "string",
                          "isActive": true,
                          "status": "pending_approval",
                          "createdDateTime": "string"
                        }
                      ],
                      "errors": [
                        {
                          "errorCode": "string",
                          "message": "string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      },
      "post": {
        "tags": [
          "secure-biometric-interface-controller"
        ],
        "summary": "NEW: Add a new device and also add an inactive mapping to SBI",
        "description": "This endpoint adds a new device and also an in active mapping between an SBI with status as \"approved\" \r\nand Device with status as \"pending_approval\" .\r\n\r\nAs per existing tables `pms.device_detail`, `pms.device_detail_sbi` and `pms.secure_biometric_interface` \r\nthere is no direct parent child relation ship between a device and SBI. But as per new UI design we need to incorporate the same. \r\nTo do so, whenever a device is created, the UI will call this endpoint which will first add a new the device in DB and also add an in active mapping between device and SBI.\r\nLater when Partner Admin will approve the Device, the mapping will also be activated.\r\n\r\nAs per new UI design. a device should not exist without being associated with a SBI.\r\nTo support this, whenever any error occurs while adding the inactive mapping between a device and SBI, \r\ninstead of leaving the orphaned device in DB, this endpoint will delete it.\r\n\r\nThis endpoint should be configured for the Roles: DEVICE_PROVIDER,PARTNER_ADMIN\r\n",
        "operationId": "post-device-to-sbi",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sbiId",
            "in": "path",
            "description": "Unique identifier of SBI",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperSbiAndDeviceMappingRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "`mosip.pms.add.device.to.sbi.id.post`"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of this endpoint. \r\n`1.0`"
                    },
                    "responseTime": {
                      "type": "string",
                      "description": "The date time of the response in ISO format",
                      "format": "date-time"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "response": {
                      "type": "boolean",
                      "description": "The value true indicates success while false indicates failure."
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "errorCode": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "version"
                  ],
                  "x-examples": {
                    "Example 1": {
                      "id": "string",
                      "version": "string",
                      "responsetime": "2019-08-24T14:15:22Z",
                      "metadata": {},
                      "response": true,
                      "errors": [
                        {
                          "errorCode": "string",
                          "message": "string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/partners/partner-certificates-details": {
      "get": {
        "tags": [
          "partner-service-controller"
        ],
        "summary": "NEW: Get details all the partner certificates",
        "description": "This endpoint will fetch the list of all the partner certificates uploaded \r\nby all the partner Id's associated with the logged in user\r\n\r\nThis endpoint is designed to support the upcoming feature \"Multi Partner Type Support for a User\".\r\nWith this feature one PMS user account will be able to support multiple Partner Types.\r\nCurrently one PMS user account maps to one Partner Type and one Partner Id.  \r\n\r\nIf there are no partner certificates associated with any of the partner Ids' associated with the logged in user, \r\nthen it will return an array with all the associated partner ids and empty values for certifcate related attributes as the response along with the id, version, responsetime \r\nand metadata (optional) attributes.\r\n\r\nThis endpoint will be used in the page which will show all the certificates uploaded by all the partners\r\nassociated with the logged in user.\r\n\r\nThis endpoint should be configured for the Roles: AUTH_PARTNER,ABIS_PARTNER,SDK_PARTNER,DEVICE_PROVIDER,\r\nFTM_PROVIDER,CREDENTIAL_PARTNER,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER\r\n",
        "operationId": "partner-certificates",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperListCertificateDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/partners/v3": {
      "get": {
        "tags": [
          "partner-service-controller"
        ],
        "summary": "NEW: Get list of all the Partner Id's associated with logged in User and filtered by Query Parameters",
        "description": "This endpoint will fetch list of all the partners based on the query parameters.\r\n\r\nThis endpoint is designed to support the upcoming feature \"Multi Partner Type Support for a User\".\r\nWith this feature one PMS user account will be able to support multiple Partner Types.\r\nCurrently one PMS user account maps to one Partner Type and one Partner Id.  \r\n\r\nThe query parameter `status` is mandatory. The endpoint will return all \r\nPartner Id's with corresponding status value and which are mapped \r\nto the logged in user. If there are no Partner Id's with corresponding status \r\nand which are mapped to the logged in user, then it will return an empty array as the response.\r\nA Partner is auto approved by the PMS system, after the partner uploads\r\na valid CA signed certificate for the organisation.\r\n\r\n\r\nThe query parameter `policyGroupAvailable` is optional. If it is true, then this endpoint will return all \r\nPartner Id's which have a Policy Group associated with them and which are mapped \r\nto the logged in user. If there are no Partner Id's which have a Policy Group associated with them \r\nand which are mapped to the logged in user, then it will return an empty array as the response.\r\n\r\nThe query parameter `partnerType` is optional. If it is any of allowed partner types, then this endpoint will return all \r\nPartner Id's which have same partner type and which are mapped \r\nto the logged in user. If there are no Partner Id's which have same partner type\r\nand which are mapped to the logged in user, then it will return an empty array as the response.\r\n\r\nAll these 3 query parameters will work together.\r\n\r\nExample 1: `/partners/v4?status=approved&partnerType=Device_Provider&policyGroupAvailable=false`\r\nthis will return list of all Device Provider ids which are in approved status and are associated \r\nwith logged in user and but the policy group attributes in the response will be null in this case.\r\n\r\nExample 2: `/partners/v4?status=approved&partnerType=Device_Provider&policyGroupAvailable=true`\r\nthis will return an empty list since policy group is not available for Device Providers\r\n\r\nThis endpoint should be configured for the Roles: DEVICE_PROVIDER,FTM_PROVIDER,PARTNER_ADMIN,AUTH_PARTNER,ABIS_PARTNER,\r\nSDK_PARTNER,CREDENTIAL_PARTNER,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER\r\n",
        "operationId": "partner-ids-v4",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Mandatory query param which can be used to filter results by the partner's approval status. Expected values are InProgress, approved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyGroupAvailable",
            "in": "query",
            "description": "Optional query param which can be used to filter results by the policyGroupAvailable flag. It can be true or false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "partnerType",
            "in": "query",
            "description": "Optional query param which can be used to filter results by the partner type. Expected values are Auth_Partner, Device_Provider, FTM_Provider etc",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperListPolicyGroupDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/partners/{partnerId}/policies": {
      "get": {
        "tags": [
          "partner-service-controller"
        ],
        "summary": "NEW: Get all the approved policies associated with the Partner Id",
        "description": "This endpoint can be used to get all approved policies associated with the Partner Id.\r\n\r\nThis endpoint will filter the partner policy requests for the given approval status.\r\nand send the list of associated policies.\r\n\r\nIf there are no  partner policy requests which are approved, \r\nthen it will return an empty array as the response along with the id, version, \r\nresponsetime and metadata (optional) attributes.\r\n\r\nThis endpoint should be configured for the Roles: AUTH_PARTNER,PARTNER_ADMIN. \r\nIt can be configured for other partner types as well which have a policy group associated with them.\r\n",
        "operationId": "auth-partners-policies",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partnerId",
            "in": "path",
            "description": "Unique identifier of the partner",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperListApprovedPolicyDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/securebiometricinterface/{sbiId}": {
      "patch": {
        "tags": [
          "secure-biometric-interface-controller"
        ],
        "summary": "NEW: Deactivate SBI along with associated devices",
        "description": "This endpoint will deactivate SBI based on the SBI Id sent in the Path and status sent in the Request Body. \r\n\r\nThis endpoint will check if the SBI Id belongs to the logged in user or not.\r\n\r\nThis endpoint will check if the SBI is has status as \"approved\" and value for \"is_active\" column as \"true\". \r\n\r\nFor all other status values, this endpoint will throw an error. \r\n\r\nOn deactivation the corresponding record in DB, will have status as \"approved\" and \r\nvalue for \"is_active\" column will be \"false\". \r\n\r\nThis endpoint will also deactivate all the associated devices by changing their status as below.\r\n1. The associated device with status status as \"approved\" and value for \"is_active\" column as \"true\" will be changed to status as \"approved\" and value for \"is_active\" column will be \"false\".\r\n2. The associated device with status status as \"pending_approval\" will be changed to status as \"rejected\".\r\n\r\nThis endpoint should be configured for the Roles: DEVICE_PROVIDER,PARTNER_ADMIN",
        "operationId": "deactivate-sbi",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sbiId",
            "in": "path",
            "description": "Unique identifier of the SBI",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperDeactivateSbiRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperSbiDetailsResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/ftpchipdetail": {
      "get": {
        "tags": [
          "ftp-chip-detail-controller"
        ],
        "summary": "NEW: Get the list of all the FTM Chip details",
        "description": "This endpoint will fetch the list of all the FTM Chip details created \r\nby all the partner Id's associated with the logged in user.\r\n\r\nThis endpoint is designed to support the upcoming feature \"Multi Partner Type Support for a User\".\r\nWith this feature one PMS user account will be able to support multiple Partner Types.\r\nCurrently one PMS user account maps to one Partner Type and one Partner Id.  \r\n\r\nIf there are no FTM Chip details associated with any of the partner Ids' associated with the logged in user, \r\nthen it will return an empty array as the response along with the id, version, responsetime \r\nand metadata (optional) attributes.\r\n\r\nThis endpoint should be configured for the Roles: FTM_PROVIDER,PARTNER_ADMIN\r\n\r\n",
        "operationId": "ftm-chip-details",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperListFtmProviderDetailsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      },
      "post": {
        "tags": [
          "ftp-chip-detail-controller"
        ],
        "summary": "EXISTING: Endpoint to save ftpChipDetail",
        "description": "Saves ftpChipDetail and return ftpChipDetail id",
        "operationId": "createDeviceDetail",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperFtpChipDetailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperIdDto"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      },
      "patch": {
        "tags": [
          "ftp-chip-detail-controller"
        ],
        "summary": "EXISTING: Endpoint to approve/reject ftp chip detail",
        "description": "Approve ftp chip detail and returns success message. This endpoint is for Partner Admin.",
        "operationId": "approveDeviceDetails",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperFtpChipDetailStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperString"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/ftpchipdetail/{ftmId}/certificate-data": {
      "get": {
        "tags": [
          "ftp-chip-detail-controller"
        ],
        "summary": "NEW: Get both the FTM chip certificates",
        "description": "This endpoint will fetch both the CA signed certifacte uploaded by the FTM Chip Provider \r\nand the MOSIP signed certificate, which is generated by PMS after the CA signed certificate \r\nis uploaded by the FTM Chip Provider.\r\n\r\n\r\nThis endpoint will use Kernel Key Manager service endpoint `getPartnerSignedCertificate/{$partnerCertId}` \r\nto get the certificates.\r\n\r\nThis endpoint should be configured for the all the roles: FTM_PROVIDER,PARTNER_ADMIN",
        "operationId": "ftm-certificate-data",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ftmId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique id that is required to access this endpoint.\r\n`mosip.pms.original.ftm.certificate.get`"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of this endpoint. \r\n`1.0`"
                    },
                    "responseTime": {
                      "type": "string",
                      "description": "The date time of the response in ISO format"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Optional metadata about the response"
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "caSignedCertificateData": {
                          "type": "string",
                          "description": "The original CA signed certificate uploaded by the partner"
                        },
                        "isCaSignedCertificateExpired": {
                          "type": "boolean",
                          "description": "Flag indicating if CA signed certificate has expired or not"
                        },
                        "mosipSignedCertificateData": {
                          "type": "string",
                          "description": "The MOSIP signed certificate generated by PMS "
                        },
                        "isMosipSignedCertificateExpired": {
                          "type": "boolean",
                          "description": "Flag indicating if MOSIP signed certificate has expired or not"
                        },
                        "caSignedCertExpiryDateTime": {
                          "type": "string",
                          "description": "Date time in ISO format indicating when CA signed FTM certificate will expire"
                        },
                        "mosipSignedCertExpiryDateTime": {
                          "type": "string",
                          "description": "Date time in ISO format indicating when MOSIP signed FTM certificate will expire"
                        },
                        "caSignedCertUploadDateTime": {
                          "type": "string",
                          "description": "Date time in ISO format indicating when CA signed FTM certificate was uploaded"
                        },
                        "mosipSignedCertUploadDateTime": {
                          "type": "string",
                          "description": "Date time in ISO format indicating when MOSIP signed FTM certificate was uploaded"
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "description": "Aray of error code and message indicating the error that has occured",
                      "items": {
                        "type": "object",
                        "properties": {
                          "errorCode": {
                            "type": "string",
                            "description": "Unique code of the error indicating the error that has occured"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message indicating the error that has occured"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "version",
                    "responseTime",
                    "response"
                  ],
                  "x-examples": {
                    "Example 1": {
                      "id": "string",
                      "version": "string",
                      "responseTime": "2019-08-24T14:15:22Z",
                      "metadata": {},
                      "response": {
                        "caSignedCertificateData": "string",
                        "isCaSignedCertificateExpired": true,
                        "mosipSignedCertificateData": "string",
                        "isMosipSignedCertificateExpired": true
                      },
                      "errors": [
                        {
                          "errorCode": "string",
                          "message": "string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/ftpchipdetail/{ftmId}": {
      "patch": {
        "tags": [
          "ftp-chip-detail-controller"
        ],
        "summary": "NEW: Deactivate the FTM chip details",
        "description": "This endpoint will deactivate FTM chip details based on the FTM chip details Id  sent in the Path and status sent in the Request Body.\r\n\r\nThis endpoint will check if the FTM chip details Id belongs to the logged in user or not.\r\n\r\nThis endpoint will check if the FTM chip details has status as \"approved\" and value for \"is_active\" column as \"true\". \r\n\r\nFor all other status values, this endpoint will throw an error. \r\n\r\nThis endpoint should be configured for the Roles: FTM_PROVIDER,PARTNER_ADMIN",
        "operationId": "deactivate-ftm",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ftmId",
            "in": "path",
            "description": "Unique identifier of the FTM",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique identifier required to call this endpoint. \r\n`mosip.pms.deactivate.ftm.patch`"
                  },
                  "version": {
                    "type": "string",
                    "description": "Version of this endpoint. \r\n`1.0`"
                  },
                  "requestTime": {
                    "type": "string",
                    "description": "Date time in ISO format, when request is being sent."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Optional metadata about the request"
                  },
                  "request": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "Activate",
                          "De-Activate"
                        ],
                        "description": "Status to Activate or Deactivate the FTM"
                      }
                    }
                  }
                },
                "required": [
                  "id",
                  "version",
                  "requestTime",
                  "request"
                ],
                "x-examples": {
                  "Example 1": {
                    "id": "string",
                    "version": "string",
                    "requestTime": "2019-08-24T14:15:22Z",
                    "metadata": {},
                    "request": {
                      "deviceId": "device789"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier required to call this endpoint. \r\n`mosip.pms.deactivate.ftm.patch`"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of this endpoint. \r\n`1.0`"
                    },
                    "responseTime": {
                      "type": "string",
                      "description": "Date time in ISO format, when response is being sent."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Optional metadata about the response"
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "pending_cert_upload",
                            "pending_approval",
                            "approved",
                            "rejected"
                          ],
                          "description": "Status of the FTM Chip details. "
                        },
                        "isActive": {
                          "type": "boolean",
                          "description": "True indicates that the FTM Chip is active."
                        },
                        "ftmId": {
                          "type": "string",
                          "description": "Unique identifier of FTM Chip Details"
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "description": "Aray of error code and message indicating the error that has occured",
                      "items": {
                        "type": "object",
                        "properties": {
                          "errorCode": {
                            "type": "string",
                            "description": "Unique code of the error indicating the error that has occured"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message indicating the error that has occured"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "version",
                    "responseTime"
                  ],
                  "x-examples": {
                    "Example 1": {
                      "id": "string",
                      "version": "string",
                      "responseTime": "2019-08-24T14:15:22Z",
                      "metadata": {},
                      "response": {
                        "deviceId": "string",
                        "status": "pending_approval",
                        "isActive": true
                      },
                      "errors": [
                        {
                          "errorCode": "string",
                          "message": "string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/ftpchipdetail/uploadcertificate": {
      "post": {
        "tags": [
          "ftp-chip-detail-controller"
        ],
        "summary": "EXISTING: Endpoint to upload certificate of ftp chip",
        "description": "uploads the ftp chip certificate and returns success message",
        "operationId": "uploadPartnerCertificate_1",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperFtpChipCertificateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperFtpCertificateResponseDto"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/devicedetail/{deviceId}": {
      "patch": {
        "tags": [
          "device-detail-controller"
        ],
        "summary": "NEW: Deactivate the Device details",
        "description": "This endpoint will deactivate Device based on the Device Id  sent in the Path and status sent in the Request Body. \r\n\r\nThis endpoint will check if the Device Id belongs to the logged in user or not.\r\n\r\nThis endpoint will check if the Device is has status as \"approved\" and value for \"is_active\" column as \"true\". \r\n\r\nFor all other status values, this endpoint will throw an error. \r\n\r\nOn deactivation the corresponding record in DB, will have status as \"approved\" and \r\nvalue for \"is_active\" column will be \"false\". \r\n\r\nThis endpoint should be configured for the Roles: DEVICE_PROVIDER,PARTNER_ADMIN",
        "operationId": "deactivate-device",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "Unique identifier of the Device",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperDeactivateDeviceRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDeviceDetailResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/system-config": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "NEW: Get configurations for the PMS system",
        "description": "This endpoint will fetch the configurations for the PMS and send these to UI.\r\n\r\nNo roles are required for this endpoint",
        "operationId": "system-config",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperMapStringString"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/users/user-consent": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "NEW: Get the user consent status",
        "description": "This endpoint will fetch the user's consent from the database. \r\n\r\nThis consent is related to the data that PMS portal captures from the partner.\r\nThe consent will be asked only once after the newly registered user logs in for the first time into PMS.\r\nThereafter the consent will not be asked if it has been given previously.\r\n\r\nThis endpoint should be configured for all the Roles: AUTH_PARTNER,ABIS_PARTNER,SDK_PARTNER,\r\nDEVICE_PROVIDER,FTM_PROVIDER,CREDENTIAL_PARTNER,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER\r\n\r\n",
        "operationId": "get-user-consent",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperUserDetailsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      },
      "post": {
        "tags": [
          "user-controller"
        ],
        "summary": "NEW: Save the user consent",
        "description": "This endpoint will save the user's consent in the database. \r\nThis consent is related to the data that PMS portal captures from the partner.\r\nThe consent will be asked only once after the newly registered user logs in for the first time into PMS.\r\nThereafter the consent will not be asked if it has been given previously.\r\n\r\nThis endpoint should be configured for all the Roles: AUTH_PARTNER,ABIS_PARTNER,SDK_PARTNER,\r\nDEVICE_PROVIDER,FTM_PROVIDER,CREDENTIAL_PARTNER,PARTNER_ADMIN,ONLINE_VERIFICATION_PARTNER",
        "operationId": "post-user-consent",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique id that is required to access this endpoint.\r\n`mosip.pms.user.consent.post`"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of this endpoint. \r\n`1.0`"
                    },
                    "responseTime": {
                      "type": "string",
                      "description": "The date time of the response in ISO format"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Optional metadata about the response"
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "userId": {
                          "type": "string",
                          "description": "Unique identifier of the logged in user"
                        },
                        "consentGiven": {
                          "type": "boolean",
                          "description": "Flag indicating if the user has given the consent to PMS or not"
                        },
                        "consentGivenDateTime": {
                          "type": "string",
                          "description": "Date time in ISO format indicating when consent was given",
                          "format": "date-time"
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "description": "Optional array of error codes and messages",
                      "items": {
                        "type": "object",
                        "properties": {
                          "errorCode": {
                            "type": "string",
                            "description": "Unique identifier of the error that occured while processing the request"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message with details about the error that occured while processing the request"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "version",
                    "responseTime"
                  ],
                  "x-examples": {
                    "Example 1": {
                      "id": "string",
                      "version": "string",
                      "responseTime": "2019-08-24T14:15:22Z",
                      "metadata": {},
                      "response": {
                        "userId": "string",
                        "consentGiven": true,
                        "consentGivenDtimes": "string"
                      },
                      "errors": [
                        {
                          "errorCode": "string",
                          "message": "string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/partners/email/verify": {
      "put": {
        "tags": [
          "partner-service-controller"
        ],
        "summary": "EXISTING: To verify partner's email",
        "description": "Endpoint to verify partner email",
        "operationId": "isEmailExists",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperEmailVerificationRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperEmailVerificationResponseDto"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/partners/certificate/ca/upload": {
      "post": {
        "tags": [
          "partner-service-controller"
        ],
        "summary": "EXISTING: Endpoint to upload CA / Intermediate CA certificate",
        "description": "Endpoint to upload  CA / Intermediate CA certificate. This endpoint is for Partner Admin. ",
        "operationId": "uploadCACertificate",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperCACertificateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCACertificateResponseDto"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/partners/certificate/upload": {
      "post": {
        "tags": [
          "partner-service-controller"
        ],
        "summary": "EXISTING: Endpoint to upload partner certificate",
        "description": "Endpoint to upload partner certificate",
        "operationId": "uploadPartnerCertificate",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperPartnerCertificateUploadRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPartnerCertificateResponseDto"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/oauth/client": {
      "post": {
        "tags": [
          "client-management-controller"
        ],
        "summary": "EXISTING: Create a new OAuth Client",
        "operationId": "createOAUTHClient",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperClientDetailCreateRequestV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperClientDetailResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      },
      "get": {
        "tags": [
          "client-management-controller"
        ],
        "summary": "NEW: Endpoint to get the list of all the OAuth clients created by the Auth Partners",
        "description": "This endpoint is for both the regular Auth Partner user and Partner Admin user.\r\n\r\nOAuth client can be used by the partner, to faciltate use of Esignet system of Mosip.\r\n\r\nThis endpoint supports pagination, sorting, and filtering based on optional query parameters. \r\n\r\nIf the token used to access this endpoint, does not have the PARTNER_ADMIN role, \r\nthen it will fetch all the OAuth Clients created by all the Auth Partners, associated with the logged in user only.\r\n\r\nIf the token used to access this endpoint, has PARTNER_ADMIN role, \r\nthen it will fetch all the OAuth Clients created by all the Auth Partners across all users.\r\n\r\nAn Auth Partner is auto approved by the PMS system, after the partner uploads a valid CA signed certificate for the organisation.\r\n\r\nA Policy is approved by Partner Admin. Once a Policy is approved multiple OAuth clients can be created on it. By default, this OAuth client is in Active status.\r\n\r\nThis endpoint is designed to support the upcoming feature \"Multi Partner Type Support for a User\". With this feature one PMS user account will be able to support multiple Partner Types. Currently one PMS user account maps to one Partner Type and one Partner Id.\r\n\r\nIf there are no OAuth cliens available, then it will return an empty array as the response along with the id, version, responsetime and metadata (optional) attributes.\r\n\r\nThis endpoint should be configured for the Roles: AUTH_PARTNER,PARTNER_ADMIN",
        "operationId": "get-all-oauth-clients",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortFieldName",
            "in": "query",
            "description": "Optional request parameter. Can be used to sort the response by the sortFieldName. Both sorting and pagination request parameters should be given together.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortType",
            "in": "query",
            "description": "Optional request parameter. Can be used to sort the response with this sort order. Default is asc order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "Page Number for the pagination. Starts with 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page Size for the pagination. Both pageNo and pageSize should be given in the request together. ",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "partnerId",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given partnerId.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgName",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given orgName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyGroupName",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given policyGroupName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyName",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given policyName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientName",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given clientName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given status of OAuth client. Allowed values as ACTIVE or INACTIVE.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique id required to access this endpoint `mosip.pms.oauth.partners.clients.get`"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of this endpoint. \r\n`1.0`"
                    },
                    "responseTime": {
                      "type": "string",
                      "description": "Date in ISO format indicating date time when response was sent",
                      "format": "date-time"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Optional metadata about the response"
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "pageNo": {
                          "type": "integer",
                          "description": "Page Number of the data in the response"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "Page Size of the data in the response"
                        },
                        "totalResults": {
                          "type": "integer",
                          "description": "Total number of records across all the pages in the response"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "partnerId": {
                                "type": "string",
                                "description": "Unique identifier of the Partner"
                              },
                              "orgName": {
                                "type": "string",
                                "description": "Organisation name of the Partner"
                              },
                              "policyGroupId": {
                                "type": "string",
                                "description": "Unique identifier of the Policy Group associated with the Partner"
                              },
                              "policyGroupName": {
                                "type": "string",
                                "description": "Name of the Policy Group associated with the Partner"
                              },
                              "policyGroupDescription": {
                                "type": "string",
                                "description": "Description of the Policy Group associated with the Partner"
                              },
                              "policyName": {
                                "type": "string",
                                "description": "Name of the Policy"
                              },
                              "policyDescription": {
                                "type": "string",
                                "description": "Description of the Policy"
                              },
                              "clientId": {
                                "type": "string",
                                "description": "Unique identifier of the Oauth client"
                              },
                              "clientName": {
                                "type": "string",
                                "description": "Oauth client name in JSON format. This JSON will give client name in Multi Language."
                              },
                              "status": {
                                "type": "string",
                                "description": "Status of the Oauth client"
                              },
                              "createdDateTime": {
                                "type": "string",
                                "description": "Created date in ISO format"
                              },
                              "updatedDateTime": {
                                "type": "string",
                                "description": "Updated date in ISO format"
                              }
                            }
                          }
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Aray of error code and message indicating the error that has occured",
                        "properties": {
                          "errorCode": {
                            "type": "string",
                            "description": "Unique code of the error indicating the error that has occured"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message indicating the error that has occured"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "id": "string",
                      "version": "string",
                      "responseTime": "2024-11-22T13:32:49.185Z",
                      "metadata": {},
                      "response": {
                        "pageNo": 0,
                        "pageSize": 0,
                        "totalResults": 0,
                        "data": [
                          {
                            "partnerId": "partner123",
                            "orgName": "abc",
                            "policyGroupName": "Security Policies",
                            "policyGroupDescription": "Security Policies",
                            "policyName": "Data Protection Policy",
                            "policyDescription": "Data Protection Policy",
                            "oidcClientId": "oidcClient456",
                            "oidcClientName": "MyOIDCClient",
                            "status": "active",
                            "createdDateTime": "2024-08-08T10:00:00Z"
                          }
                        ]
                      },
                      "errors": [
                        {
                          "errorCode": "string",
                          "message": "string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/oauth/client/{client_id}": {
      "get": {
        "tags": [
          "client-management-controller"
        ],
        "summary": "EXISTING: Get details of an existing OAuth Client",
        "operationId": "getOAuthClient",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperClientDetail"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      },
      "put": {
        "tags": [
          "client-management-controller"
        ],
        "summary": "EXISTING: Update an existing OAuth Client",
        "operationId": "updateOAUTHClient",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperClientDetailUpdateRequestV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperClientDetailResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/logout/user": {
      "get": {
        "tags": [
          "login-controller"
        ],
        "summary": "EXISTING: Logout user",
        "operationId": "logoutUser",
        "parameters": [
          {
            "name": "redirecturi",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "cookie",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/login/{redirectURI}": {
      "get": {
        "tags": [
          "login-controller"
        ],
        "summary": "EXISTING: Login Redirect",
        "operationId": "login",
        "parameters": [
          {
            "name": "state",
            "in": "cookie",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirectURI",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/login-redirect/{redirectURI}": {
      "get": {
        "tags": [
          "login-controller"
        ],
        "summary": "EXISTING: Redirect on Login",
        "operationId": "loginRedirect",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirectURI",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/authorize/admin/validateToken": {
      "get": {
        "tags": [
          "login-controller"
        ],
        "summary": "EXISTING: Validate the token",
        "operationId": "validateAdminToken",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperMosipUserDto"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/devicedetail/{id}/approval": {
      "post": {
        "tags": [
          "device-detail-controller"
        ],
        "summary": "NEW: Approve or Reject the device and activate/deactivate the mapping to SBI",
        "description": "This endpoint will be used by Partner Admin to Approve or Reject the Device as well as to activate/deactivate the mapping between Device and SBI.\r\n\r\nThis endpoint should be configured for the Role: PARTNER_ADMIN",
        "operationId": "approval-mapping-device-to-sbi",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the Device",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique id required to call this endpoint.\r\n`mosip.pms.approval.mapping.device.to.sbi.post`"
                  },
                  "version": {
                    "type": "string",
                    "description": "Version of this endpoint. \r\n`1.0`"
                  },
                  "requestTime": {
                    "type": "string",
                    "description": "Current date time in ISO format, when request is being sent.",
                    "format": "date-time"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Optional metadata about the request"
                  },
                  "request": {
                    "type": "object",
                    "properties": {
                      "partnerId": {
                        "type": "string",
                        "description": "Unique identifer of Partner"
                      },
                      "sbiId": {
                        "type": "string",
                        "description": "Unique identifer of SBI"
                      },
                      "deviceDetailId": {
                        "type": "string",
                        "description": "Unique identifer of Device"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "approved",
                          "rejected"
                        ],
                        "description": "Status to be updated for the Device"
                      }
                    }
                  }
                },
                "required": [
                  "id",
                  "version",
                  "request"
                ],
                "x-examples": {
                  "Example 1": {
                    "id": "",
                    "version": "",
                    "requesttime": "2019-08-24T14:15:22Z",
                    "metadata": {},
                    "request": {
                      "partnerId": "partner123",
                      "sbiId": "sbi456",
                      "deviceDetailId": "device789"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique id required to call this endpoint.\r\n`mosip.pms.reject.mapping.device.to.sbi.post`"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of this endpoint. \r\n`1.0`"
                    },
                    "responseTime": {
                      "type": "string",
                      "description": "The date time of the response in ISO format",
                      "format": "date-time"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Optional metadata about the response"
                    },
                    "response": {
                      "type": "boolean",
                      "description": "True value indicates success, while false indicates failure"
                    },
                    "errors": {
                      "type": "array",
                      "description": "Optional array about the errors while processing the request",
                      "items": {
                        "type": "object",
                        "properties": {
                          "errorCode": {
                            "type": "string",
                            "description": "Unique identifer of the error"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message with details about the error"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "version"
                  ],
                  "x-examples": {
                    "Example 1": {
                      "id": "string",
                      "version": "string",
                      "responsetime": "2019-08-24T14:15:22Z",
                      "metadata": {},
                      "response": true,
                      "errors": [
                        {
                          "errorCode": "string",
                          "message": "string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/admin-partners": {
      "get": {
        "tags": [
          "partner-management-controller"
        ],
        "summary": "NEW: Endpoint to get the list of all the partners in the system",
        "description": "This endpoint is for the Partner Admin users only.\r\n\r\nThis endpoint can be used to get the list of all Partners created in the PMS system.\r\n\r\nThis endpoint upgrades the earlier GET endpoints `/partners` and `/partners/v2` by adding new features like:\r\n1. Pagination \r\n2. Sorting\r\n3. Filtering\r\n4. Policy Group Details in Response\r\n5. Certificate Upload Status in Response\r\n\r\nThis endpoint should be configured for the Role: PARTNER_ADMIN",
        "operationId": "get-admin-partners",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortFieldName",
            "in": "query",
            "description": "Optional request parameter. Can be used to sort the response by the sortFieldName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortType",
            "in": "query",
            "description": "Optional request parameter. Can be used to sort the response with this sort order. Default is asc order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "Page Number for the pagination. Starts with 0.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page Size for the pagination. Default is 8.",
            "schema": {
              "type": "integer",
              "default": 8
            }
          },
          {
            "name": "partnerId",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given partnerId.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partnerType",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given partnerType.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given isActive status..",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "name": "orgName",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given orgName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailAddress",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given emailAddress.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certificateUploadStatus",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given certificateUploadStatus.",
            "schema": {
              "type": "string",
              "enum": [
                "uploaded",
                "not_uploaded"
              ]
            }
          },
          {
            "name": "policyGroupName",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given policyGroupName.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique id that is required to access this endpoint.\r\n`mosip.pms.all.partners.get`"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of this endpoint. \r\n`1.0`"
                    },
                    "responseTime": {
                      "type": "string",
                      "description": "The date time of the response in ISO format",
                      "format": "date-time"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Optional metadata about the response"
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "pageNo": {
                          "type": "integer",
                          "description": "Page Number of the data in the response"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "Page Size of the data in the response"
                        },
                        "totalResults": {
                          "type": "integer",
                          "description": "Total number of records across all the pages in the response"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "partnerId": {
                                "type": "string",
                                "description": "Unique identifier of the Partner"
                              },
                              "partnerType": {
                                "type": "string",
                                "description": "Type of the Partner"
                              },
                              "orgName": {
                                "type": "string",
                                "description": "Organisation name of the Partner"
                              },
                              "policyGroupId": {
                                "type": "string",
                                "description": "Unique identifier of the Policy Group associated with the Partner"
                              },
                              "policyGroupName": {
                                "type": "string",
                                "description": "Name of the Policy Group associated with the Partner"
                              },
                              "emailAddress": {
                                "type": "string",
                                "description": "Email address of the Partner"
                              },
                              "certificateUploadStatus": {
                                "type": "string",
                                "enum": [
                                  "uploaded",
                                  "not_uploaded"
                                ],
                                "description": "Certificate upload status of the Partner"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "InProgress",
                                  "approved",
                                  "rejected"
                                ],
                                "description": "Approval status of the Partner"
                              },
                              "isActive": {
                                "type": "boolean",
                                "description": "Activation status of the Partner"
                              },
                              "createdDateTime": {
                                "type": "string",
                                "description": "Created date in ISO format of the Partner"
                              }
                            }
                          }
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Aray of error code and message indicating the error that has occured",
                        "properties": {
                          "errorCode": {
                            "type": "string",
                            "description": "Unique code of the error indicating the error that has occured"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message indicating the error that has occured"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "id": "mosip.pms.all.partners.get",
                      "version": "1.0",
                      "responseTime": "2024-11-05T10:36:13.780Z",
                      "metadata": {},
                      "response": {
                        "pageNo": 0,
                        "pageSize": 10,
                        "totalResults": 1,
                        "data": [
                          {
                            "partnerId": "partner123",
                            "partnerType": "Auth_partner",
                            "orgName": "abc",
                            "policyGroupId": "12345",
                            "policyGroupName": "Compliance Policies",
                            "emailAddress": "abc@gmail.com",
                            "certificateUploadStatus": "uploaded",
                            "status": "approved",
                            "isActive": true,
                            "createdDateTime": "2024-08-01T14:30:00Z"
                          }
                        ]
                      },
                      "errors": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/partners/{partnerId}": {
      "patch": {
        "tags": [
          "partner-management-controller"
        ],
        "summary": "EXISTING: Endpoint to activate/de-activate partner",
        "description": "Endpoint to activate/de-activate partner. This endpoint is for Partner Admin.",
        "operationId": "activateDeactivatePartner",
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWrapperStatusRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPartnersPolicyMappingResponse"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/admin-partners/{partnerId}": {
      "get": {
        "tags": [
          "partner-management-controller"
        ],
        "summary": "NEW: Endpoint to get the details of the partner",
        "description": "This endpoint is for the Partner Admin users only.\r\n\r\nThis endpoint can be used to get all the details of the Partner.\r\n\r\nThis endpoint upgrades the earlier GET endpoint `/partners/{partnerId}` by adding new features like:\r\n1. Policy Group Details in Response\r\n2. Certificate Details in Response\r\n\r\nThis endpoint should be configured for the Role: PARTNER_ADMIN",
        "operationId": "get-partner-v2",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partnerId",
            "in": "path",
            "description": "The unique identifier if the partner.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique id that is required to access this endpoint.\r\n`mosip.pms.api.id.partner.details.get`"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of this endpoint. \r\n`1.0`"
                    },
                    "responseTime": {
                      "type": "string",
                      "description": "The date time of the response in ISO format",
                      "format": "date-time"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Optional metadata about the response"
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "partnerId": {
                          "type": "string",
                          "description": "Unique identifier of the Partner"
                        },
                        "approvalStatus": {
                          "type": "string",
                          "enum": [
                            "approved",
                            "rejected",
                            "InProgress"
                          ],
                          "description": "Unique identifier of the Partner"
                        },
                        "createdDateTime": {
                          "type": "string",
                          "description": "Date in ISO format of creation date of the Partner"
                        },
                        "partnerType": {
                          "type": "string",
                          "description": "Type of the Partner"
                        },
                        "organizationName": {
                          "type": "string",
                          "description": "Name of the Organisation of the Partner"
                        },
                        "contactNumber": {
                          "type": "string",
                          "description": "Contact Number of the Partner"
                        },
                        "policyGroupName": {
                          "type": "string",
                          "description": "Name of Policy Group associated with the Partner. It is null in case of Device Provider and FTM Provider."
                        },
                        "policyGroupDescription": {
                          "type": "string",
                          "description": "Description of Policy Group associated with the Partner. It is null in case of Device Provider and FTM Provider."
                        },
                        "emailId": {
                          "type": "string",
                          "description": "Email id of the Partner"
                        },
                        "certificateUploadDateTime": {
                          "type": "string",
                          "description": "Date in ISO format of certificate upload date time by the Partner"
                        },
                        "certificateExpiryDateTime": {
                          "type": "string",
                          "description": "Date in ISO format of certificate expiry date time"
                        },
                        "isCertificateAvailable": {
                          "type": "boolean",
                          "description": "Flag indicating if certificate is uploaded or not"
                        },
                        "isActive": {
                          "type": "boolean",
                          "description": "Flag indicating status of the Partner"
                        },
                        "firstName": {
                          "type": "string",
                          "description": "First Name of the partner as available in Key Cloak"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "Last Name of the partner as available in Key Cloak"
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Aray of error code and message indicating the error that has occured",
                        "properties": {
                          "errorCode": {
                            "type": "string",
                            "description": "Unique code of the error indicating the error that has occured"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message indicating the error that has occured"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "id": "mosip.pms.all.partners.get",
                      "version": "1.0",
                      "responseTime": "2024-11-05T10:36:13.780Z",
                      "metadata": {},
                      "response": {
                        "pageNo": 0,
                        "pageSize": 10,
                        "totalResults": 1,
                        "data": [
                          {
                            "partnerId": "partner123",
                            "partnerType": "Auth_partner",
                            "orgName": "abc",
                            "policyGroupId": "12345",
                            "policyGroupName": "Compliance Policies",
                            "emailAddress": "abc@gmail.com",
                            "certificateUploadStatus": "uploaded",
                            "status": "approved",
                            "isActive": true,
                            "createdDateTime": "2024-08-01T14:30:00Z"
                          }
                        ]
                      },
                      "errors": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/partner-policy-requests": {
      "get": {
        "tags": [
          "partner-management-controller"
        ],
        "summary": "NEW: Get the list of all the policy requests made by the partners",
        "description": "This endpoint is for both regular users and the Partner Admin users.\r\n\r\nThis endpoint supports pagination, sorting, and filtering based on optional query parameters. \r\n\r\nIf the token used to access this endpoint, does not have the PARTNER_ADMIN role, \r\nthen it will fetch all the Policy Requests made by all the Partners associated with the logged in user only.\r\n\r\nIf the token used to access this endpoint, has PARTNER_ADMIN role, \r\nthen it will fetch all the Policy Requests made by all the Partners across all users.\r\n\r\nThis endpoint upgrades the earlier POST endpoint `/partners/apikey/request/search` by adding new features like:\r\n1. Additional field - partnerType, policyGroupName, updatedDateTime\r\n2. Performance improvement\r\n\r\nThis endpoint should be configured for the Roles: PARTNER_ADMIN, AUTH_PARTNER, ABIS_PARTNER, SDK_PARTNER, CREDENTIAL_PARTNER, ONLINE_VERIFICATION_PARTNER",
        "operationId": "get-partner-policy-requests",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortFieldName",
            "in": "query",
            "description": "Optional request parameter. Can be used to sort the response by the sortFieldName. Both sorting and pagination request parameters should be given together.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortType",
            "in": "query",
            "description": "Optional request parameter. Can be used to sort the response with this sort order. Default is asc order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "Page Number for the pagination. Starts with 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page Size for the pagination. Both pageNo and pageSize should be given in the request parameters. ",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "partnerId",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given partnerId.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partnerComment",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given partnerComment text.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgName",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given orgName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given status. Allowed values are approved, rejected, InProgress.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyId",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given policyId.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyName",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given policyName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyGroupName",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given policyGroupName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partnerType",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given partnerType.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique id that is required to access this endpoint.\r\n`mosip.pms.all.partner.policy.mapping.requests.get`"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of this endpoint. \r\n`1.0`"
                    },
                    "responseTime": {
                      "type": "string",
                      "description": "The date time of the response in ISO format",
                      "format": "date-time"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Optional metadata about the response"
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "pageNo": {
                          "type": "integer",
                          "description": "Page Number of the data in the response"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "Page Size of the data in the response"
                        },
                        "totalResults": {
                          "type": "integer",
                          "description": "Total number of records across all the pages in the response"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Unique identifier of the Policy Request by the Partner"
                              },
                              "partnerId": {
                                "type": "string",
                                "description": "Unique identifier of the Partner"
                              },
                              "partnerType": {
                                "type": "string",
                                "description": "Type of the Partner"
                              },
                              "partnerStatus": {
                                "type": "string",
                                "enum": [
                                  "approved",
                                  "InProgress",
                                  "deactivated"
                                ],
                                "description": "Status of the Partner"
                              },
                              "orgName": {
                                "type": "string",
                                "description": "Organisation name of the Partner"
                              },
                              "policyGroupId": {
                                "type": "string",
                                "description": "Unique identifier of the Policy Group associated with the Partner"
                              },
                              "policyGroupName": {
                                "type": "string",
                                "description": "Name of the Policy Group associated with the Partner"
                              },
                              "policyGroupDescription": {
                                "type": "string",
                                "description": "Description of the Policy Group associated with the Partner"
                              },
                              "policyId": {
                                "type": "string",
                                "description": "Unique identifier of the requested policy"
                              },
                              "policyName": {
                                "type": "string",
                                "description": "Name of the associated Policy"
                              },
                              "policyDescription": {
                                "type": "string",
                                "description": "Description of the Policy"
                              },
                              "createdDateTime": {
                                "type": "string",
                                "description": "Created date in ISO format of the Policy Request"
                              },
                              "partnerComment": {
                                "type": "string",
                                "description": "Comments added by the Partner while making the Policy Request"
                              },
                              "updatedDateTime": {
                                "type": "string",
                                "description": "Updated date in ISO format of the Policy Request"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "InProgress",
                                  "approved",
                                  "rejected"
                                ],
                                "description": "Approval status of the Policy Request by the Partner"
                              }
                            }
                          }
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Aray of error code and message indicating the error that has occured",
                        "properties": {
                          "errorCode": {
                            "type": "string",
                            "description": "Unique code of the error indicating the error that has occured"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message indicating the error that has occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/partner-api-keys": {
      "get": {
        "tags": [
          "partner-management-controller"
        ],
        "summary": "NEW: Get the list of all the API keys created by all the Auth Partners",
        "description": "This endpoint is for both regular users and the Partner Admin users.\r\n\r\nThis endpoint supports pagination, sorting, and filtering based on optional query parameters.\r\n\r\nIf the token used to access this endpoint, does not have the PARTNER_ADMIN role, then it will fetch all the API keys created by all the Auth Partners associated with the logged in user only.\r\n\r\nIf the token used to access this endpoint, has PARTNER_ADMIN role, then it will fetch all the API keys created by all the Auth Partners across all users.\r\n\r\nThis endpoint is designed to support the upcoming feature \"Multi Partner Type Support for a User\". With this feature one PMS user account will be able to support multiple Partner Types. Currently one PMS user account maps to one Partner Type and one Partner Id.\r\n\r\nThis endpoint upgrades the earlier GET endpoint `/partners/apikey/search` by adding new features like:\r\n1. Performance improvement\r\n2. Fields like policyGroupName, policyDescription, policyGroupDescription\r\n\r\nThis endpoint should be configured for the Roles: PARTNER_ADMIN,AUTH_PARTNER",
        "operationId": "get-auth-partners-apikeys",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortFieldName",
            "in": "query",
            "description": "Optional request parameter. Can be used to sort the response by the sortFieldName. Sorting parameters should be given along with pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortType",
            "in": "query",
            "description": "Optional request parameter. Can be used to sort the response with this sort order. Default is asc order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "Page Number for the pagination. Starts with 0.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page Size for the pagination. Page Number and Page Size should be given together in the request.",
            "schema": {
              "type": "integer",
              "default": 8
            }
          },
          {
            "name": "partnerId",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given partnerId.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyLabel",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given apiKeyLabel.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgName",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given orgName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyName",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given policyName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given status of API key. Allowed values as activated or deactivated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyGroupName",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given policyGroupName.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique id required to access this endpoint `mosip.pms.all.api.key.requests.get`"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of this endpoint. \r\n`1.0`"
                    },
                    "responseTime": {
                      "type": "string",
                      "description": "Date in ISO format indicating date time when response was sent",
                      "format": "date-time"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Optional metadata about the response"
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "pageNo": {
                          "type": "integer",
                          "description": "Page Number of the data in the response"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "Page Size of the data in the response"
                        },
                        "totalResults": {
                          "type": "integer",
                          "description": "Total number of records across all the pages in the response"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "partnerId": {
                                "type": "string",
                                "description": "Unique identifier for the Partner"
                              },
                              "apiKeyLabel": {
                                "type": "string",
                                "description": "Unique label for the API key"
                              },
                              "orgName": {
                                "type": "string",
                                "description": "Name of the Organisation"
                              },
                              "policyName": {
                                "type": "string",
                                "description": "Name of the Policy"
                              },
                              "policyId": {
                                "type": "string",
                                "description": "Unique identifier for the Policy"
                              },
                              "policyDescription": {
                                "type": "string",
                                "description": "Description of the Policy"
                              },
                              "policyGroupName": {
                                "type": "string",
                                "description": "Name of the Policy Group"
                              },
                              "policyGroupDescription": {
                                "type": "string",
                                "description": "Description of the Policy Group"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "activated",
                                  "deactivated"
                                ],
                                "description": "Status of the API key"
                              },
                              "createdDateTime": {
                                "type": "string",
                                "description": "Created date in ISO format"
                              },
                              "policyGroupId": {
                                "type": "string",
                                "description": "Unique identifier of the Policy Group"
                              }
                            }
                          }
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Aray of error code and message indicating the error that has occured",
                        "properties": {
                          "errorCode": {
                            "type": "string",
                            "description": "Unique code of the error indicating the error that has occured"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message indicating the error that has occured"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "string",
                      "version": "string",
                      "responseTime": "2019-08-24T14:15:22Z",
                      "metadata": {},
                      "response": {
                        "pageNo": 0,
                        "pageSize": 0,
                        "totalResults": 0,
                        "data": [
                          {
                            "partnerId": "string",
                            "apiKeyLabel": "string",
                            "orgName": "string",
                            "policyName": "string",
                            "policyId": "string",
                            "policyDescription": "string",
                            "policyGroupName": "string",
                            "policyGroupDescription": "string",
                            "status": "activated",
                            "createdDateTime": "string"
                          }
                        ]
                      },
                      "errors": [
                        {
                          "errorCode": "string",
                          "message": "string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/ftpchipdetail/v2": {
      "get": {
        "tags": [
          "ftp-chip-detail-controller"
        ],
        "summary": "NEW: Get the list of all the FTM chip details created by all the Partners",
        "description": "This endpoint is for the Partner Admin users only.\r\n\r\nThis endpoint can be used to get the list of all the FTM chip details created by all the Partners.\r\n\r\nThis endpoint upgrades the earlier GET endpoint `/ftpchipdetail/search` by adding new features like:\r\n1. Performance improvement\r\n2. Deactivated status support\r\n\r\nThis endpoint should be configured for the Role: PARTNER_ADMIN",
        "operationId": "get-ftpchipdetail-search-v2",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortFieldName",
            "in": "query",
            "description": "Optional request parameter. Can be used to sort the response by the sortFieldName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortType",
            "in": "query",
            "description": "Optional request parameter. Can be used to sort the response with this sort order. Default is asc order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "Page Number for the pagination. Starts with 0.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page Size for the pagination. Default is 8.",
            "schema": {
              "type": "integer",
              "default": 8
            }
          },
          {
            "name": "partnerId",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given partnerId.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgName",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given orgName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "make",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given make of the FTM Chip.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "model",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given model of the FTM Chip.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given status of FTM chip details. Allowed values as approved, rejected, pending_approval, pending_cert_upload or deactivated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ftmId",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given ftmId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique id required to access this endpoint `mosip.pms.partners.ftm.chip.details.get`"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of this endpoint. \r\n`1.0`"
                    },
                    "responseTime": {
                      "type": "string",
                      "description": "Date in ISO format indicating date time when response was sent",
                      "format": "date-time"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Optional metadata about the response"
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "pageNo": {
                          "type": "integer",
                          "description": "Page Number of the data in the response"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "Page Size of the data in the response"
                        },
                        "totalResults": {
                          "type": "integer",
                          "description": "Total number of records across all the pages in the response"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "ftmId": {
                                "type": "string",
                                "description": "Unique identifier of the FTM chip details"
                              },
                              "partnerId": {
                                "type": "string",
                                "description": "Unique identifier of the Partner"
                              },
                              "orgName": {
                                "type": "string",
                                "description": "Organisation name of the Partner"
                              },
                              "make": {
                                "type": "string",
                                "description": "Make given in the FTM chip details"
                              },
                              "model": {
                                "type": "string",
                                "description": "Model given in the FTM chip details"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "approved",
                                  "rejected",
                                  "pending_approval",
                                  "pending_cert_upload",
                                  "deactivated"
                                ],
                                "description": "Status of the FTM chip details"
                              },
                              "isActive": {
                                "type": "boolean",
                                "description": "Status indicating if FTM chip details are active or not"
                              },
                              "isCertificateAvailable": {
                                "type": "boolean",
                                "description": "Flag indicating if FTM chip certificate has been uploaded or not"
                              },
                              "createdDateTime": {
                                "type": "string",
                                "description": "Creation date in ISO format of FTM chip details"
                              }
                            }
                          }
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Aray of error code and message indicating the error that has occured",
                        "properties": {
                          "errorCode": {
                            "type": "string",
                            "description": "Unique code of the error indicating the error that has occured"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message indicating the error that has occured"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "id": "string",
                      "version": "string",
                      "responseTime": "2024-11-29T09:50:27.661Z",
                      "metadata": {},
                      "response": {
                        "pageNo": 0,
                        "pageSize": 0,
                        "totalResults": 0,
                        "data": [
                          {
                            "ftmId": "ftp-001",
                            "partnerId": "partner123",
                            "orgName": "org123",
                            "make": "make-123",
                            "model": "model-123",
                            "status": "pending_approval",
                            "isActive": false,
                            "isCertificateAvailable": true,
                            "createdDateTime": "2024-08-01T14:30:00Z"
                          }
                        ]
                      },
                      "errors": [
                        {
                          "errorCode": "string",
                          "message": "string"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "header-0": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/trust-chain-certificates": {
      "get": {
        "tags": [
          "partner-management-controller"
        ],
        "summary": "NEW: Endpoint to get list of all root trust certificates",
        "description": "This Endpoint is only for Partner Admin.\r\n\r\nThis Endpoint will get list of all details for all the Root Trust certificates (CA and Intermediate CA). \r\nThis Endpoint will give details of all CA and Intermediate CA certificates in the system.\r\n\r\nThis endpoint fetches all details from key manager endpoint `/v1/keymanager/getCaCertificates`\r\n\r\nIt supports server side pagination, sorting and filtering.\r\n",
        "operationId": "get-/trust-chain-certificates",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortFieldName",
            "in": "query",
            "description": "Optional request parameter. Can be used to sort the response by the sortFieldName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortType",
            "in": "query",
            "description": "Optional request parameter. Can be used to sort the response with this sort order. Default is asc order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "Page Number for the pagination. Starts with 0.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page Size for the pagination. Default is 8.",
            "schema": {
              "type": "integer",
              "default": 8
            }
          },
          {
            "name": "caCertificateType",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given caCertificateType. Allowed values are ROOT and INTERMEDIATE.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certificateId",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given certificateId.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partnerDomain",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given partnerDomain. Allowed values are DEVICE, AUTH, FTM.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issuedTo",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given issuedTo  string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issuedBy",
            "in": "query",
            "description": "Optional request parameter. Can be used to filter the response by the given issuedBy string.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique id required to access this endpoint `mosip.pms.trust.certificates.get`"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of this endpoint. \r\n`1.0`"
                    },
                    "responseTime": {
                      "type": "string",
                      "description": "Date in ISO format indicating date time when response was sent",
                      "format": "date-time"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Optional metadata about the response"
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "pageNo": {
                          "type": "integer",
                          "description": "Page Number of the data in the response"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "Page Size of the data in the response"
                        },
                        "totalResults": {
                          "type": "integer",
                          "description": "Total number of records across all the pages in the response"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "caCertificateType": {
                                "type": "string",
                                "enum": [
                                  "ROOT",
                                  "INTERMEDIATE"
                                ],
                                "description": "Type of the root trust certificate"
                              },
                              "certId": {
                                "type": "string",
                                "description": "Unique identifier of the root trust certificate"
                              },
                              "partnerDomain": {
                                "type": "string",
                                "enum": [
                                  "AUTH",
                                  "DEVICE",
                                  "FTM"
                                ],
                                "description": "Domain of the root trust certificate"
                              },
                              "issuedTo": {
                                "type": "string",
                                "description": "\"Issued To\" field of the root trust certificate example `CN=CA,OU=CA,O=CA,L=PN,ST=MH,C=IN`"
                              },
                              "issuedBy": {
                                "type": "string",
                                "description": "\"Issued By\" field of the root trust certificate example `CN=CA,OU=CA,O=CA,L=PN,ST=MH,C=IN`"
                              },
                              "certThumbprint": {
                                "type": "string",
                                "description": "Unique thumbprint of the root trust certificate"
                              },
                              "validFromDate": {
                                "type": "string",
                                "description": "Date in ISO format of the \"Valid From\" field of the root trust certificate"
                              },
                              "validTillDate": {
                                "type": "string",
                                "description": "Date in ISO of format of the \"Valid Till\" field of the root trust certificate"
                              },
                              "uploadTime": {
                                "type": "string",
                                "description": "Date in ISO format of certificate Upload date."
                              },
                              "status": {
                                "type": "boolean",
                                "description": "Expiry Status of the root trust certificate. \r\nIf true, it indicates certificate has expired.\r\nIf false, it indicates certificate is valid.\r\n"
                              }
                            }
                          }
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Aray of error code and message indicating the error that has occured",
                        "properties": {
                          "errorCode": {
                            "type": "string",
                            "description": "Unique code of the error indicating the error that has occured"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message indicating the error that has occured"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "id": "string",
                      "version": "string",
                      "responseTime": "2024-12-17T11:31:11.639Z",
                      "metadata": {},
                      "response": {
                        "pageNo": 0,
                        "pageSize": 0,
                        "totalResults": 0,
                        "data": [
                          {
                            "caCertificateType": "ROOT",
                            "certId": "cert123",
                            "partnerDomain": "FTM",
                            "issuedTo": "Company A",
                            "issuedBy": "Certificate Authority X",
                            "certThumbprint": "xyx-abc-123",
                            "validFromDate": "2024-12-17T11:31:11.639Z",
                            "validTillDate": "2024-12-17T11:31:11.639Z",
                            "uploadTime": "2024-12-17T11:31:11.639Z",
                            "status": true
                          }
                        ]
                      },
                      "errors": [
                        {
                          "errorCode": "string",
                          "message": "string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    },
    "/trust-chain-certificates/{certificateId}/certificateFile": {
      "get": {
        "tags": [
          "partner-management-controller"
        ],
        "summary": "NEW: Endpoint to download p7b file for a CA / Intermediate CA certificate",
        "description": "This Endpoint is only for Partner Admin.\r\n\r\nThis Endpoint will download p7b file for a CA / Intermediate CA certificate.\r\nThe p7b file will contain the full trust chain for the given certificate.",
        "operationId": "get-/trust-chain-certificates-file",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "Authorization={jwt_token}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certificateId",
            "in": "path",
            "description": "Unique identifier of the root trust certificate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique id required to access this endpoint `mosip.pms.download.trust.certificates.get`"
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of this endpoint. \r\n`1.0`"
                    },
                    "responseTime": {
                      "type": "string",
                      "description": "Date in ISO format indicating date time when response was sent",
                      "format": "date-time"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Optional metadata about the response"
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "p7bFile": {
                          "type": "string",
                          "description": "The string representing the p7b certificate"
                        },
                        "timestamp": {
                          "type": "string",
                          "description": "Date in ISO format indicating the timestamp of response"
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Aray of error code and message indicating the error that has occured",
                        "properties": {
                          "errorCode": {
                            "type": "string",
                            "description": "Unique code of the error indicating the error that has occured"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message indicating the error that has occured"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "id": "mosip.pms.download.ca.certificate.get",
                      "version": "1.0",
                      "responseTime": "2024-12-17T11:53:12.918Z",
                      "metadata": null,
                      "response": {
                        "p7bFile": "MIAGCSqGSIb3DQEHAqCAMIACAQExADALBgkqhkiG9w0BBwGggDCCA70wggKloAMCAQICCAl5N-gwULm_MA0GCSqGSIb3DQEBCwUAMHcxCzAJBgNVBAYTAklOMQswCQYDVQQIDAJLQTESMBAGA1UEBwwJQkFOR0FMT1JFMQ0wCwYDVQQKDARJSVRCMRowGAYDVQQLDBFNT1NJUC1URUNILUNFTlRFUjEcMBoGA1UEAwwTd3d3Lm1vc2lwLmlvIChST09UKTAeFw0yNDExMDcxNDIzMDNaFw0yNzExMDcxNDIzMDNaMH8xCzAJBgNVBAYTAklOMQswCQYDVQQIDAJLQTESMBAGA1UEBwwJQkFOR0FMT1JFMQ0wCwYDVQQKDARJSVRCMRowGAYDVQQLDBFNT1NJUC1URUNILUNFTlRFUjEkMCIGA1UEAwwbd3d3Lm1vc2lwLmlvIChPSURDX1NFUlZJQ0UpMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAq2ID-BA2EvMgdzsQs9ePtDRJMFl47AyQ74_B07r61zdTrh4MDBn_JroWvZvoh0ndI8NCaoTyustal1Q3i8Z_xTBsBuAFeFt9ClI7f-XdUyf0WTxkIpzDtqHwZdGB1B2iLt1xNQd96GQJdHcnoK8AvA_KhVh7fTn4HURuzwoMSDLExTTkH2wWsiMeNtW8DuZ4tdPSnupndvJRZPpHNZwWPJxTm-p7HGuByGaa4S0XMuvhOt-MRBkuXijhzI79rvBp0AIE6dqMBP5kATI7H-yEugDzGboLGtXimZF1eneZlS2VDAaO5kJYgFv5sBK3gEAO91Xv3ACMK8kak7UWOCJm8QIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH_AgEBMB0GA1UdDgQWBBTPHwC0VDjrsnU84BlXaz9howkfADAOBgNVHQ8BAf8EBAMCAoQwDQYJKoZIhvcNAQELBQADggEBAA0cDp6tggys2uMyfvGeD_MUC_OreXLUuJowCGDMGT7js8f0_qKjJyd6tQNwOJZo-zuc9oeJFPpcdXWis2X2-tZoF_fhOi9cNzFTT5vv27WtIEyD9TJvVM6nKTupVmVyWzoZgFg7t2KWrO1kCnPPc5aYQtPDBGFEUDTKFYn8e5CFw5Gz9jZdi0237Nmn3t-S7RKUM4qvmvOy85CVyMX22Tm2o82TUkcLhjAvV9EHI7CP_y04HbUN4sFaYvTEJZZ7A7o3nKk5mtAP8eMLxHFgin1r70vOOIaseegJfMeQptjiw8dQeRDFcCe6-sQ797ftyWO3noEBCEXlWpo6jIC25cEwggO1MIICnaADAgECAgi_09FH7HtMGzANBgkqhkiG9w0BAQsFADB3MQswCQYDVQQGEwJJTjELMAkGA1UECAwCS0ExEjAQBgNVBAcMCUJBTkdBTE9SRTENMAsGA1UECgwESUlUQjEaMBgGA1UECwwRTU9TSVAtVEVDSC1DRU5URVIxHDAaBgNVBAMME3d3dy5tb3NpcC5pbyAoUk9PVCkwHhcNMjQxMTA3MTQyMjU0WhcNMzIxMTA1MTQyMjU0WjB3MQswCQYDVQQGEwJJTjELMAkGA1UECAwCS0ExEjAQBgNVBAcMCUJBTkdBTE9SRTENMAsGA1UECgwESUlUQjEaMBgGA1UECwwRTU9TSVAtVEVDSC1DRU5URVIxHDAaBgNVBAMME3d3dy5tb3NpcC5pbyAoUk9PVCkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDnV_8qQyhc-IXBHiyyB7nAU24deNRtvAcSNpKqrnSe1kFAOjWapsJe9aYMvdJRe30shH7GOruwFsh8631Q8AouwtyD35-sXgLZt0m-7uZz35MLBgIzxu3wSjnslG1SwZnIvL862petlTSi5VAD3DUfY1EokwtYZjaKXmC4OMZrq_s0Xsc9aTcixS3cRDiSvZ5LTdn3C-WU9uAOumCK4E25rTQJlSxf5bFyXgWcGx6L60i53nvLi8ghZ1rtPT9VVByX-I-vTNMsFEx_VYh_N0QXepMqRXpGSewA0qZEX9mjuHydyZRuf4tAKmgxEnVWJZwzfExtY4pN-5DeiW4oc0qDAgMBAAGjRTBDMBIGA1UdEwEB_wQIMAYBAf8CAQIwHQYDVR0OBBYEFCedaB7girhruK3OVz7CaNKKXW1CMA4GA1UdDwEB_wQEAwIChDANBgkqhkiG9w0BAQsFAAOCAQEApTvVlHJX2bH2IsQ0bWlRMwIfF5ynnIF7irP3wNHaTBNZToWE-JMmzAuTz6ZSDEMWMSKGRALRbgihbegRGVPvpxyPOoVWtR4DTvC_ZjUXFGNEY6y8sd907sZKOwmT760ueivEuWW4zzgUt5QjjBtmLlHbII_9fyvQcXXEjW6OWOAidCyd_infZD2MALktlPfNlXDAj9GyJmt4sCDvvtTRSe_VpJF20YzjQyfAIKhDSvrSCU6wM24gR7nCIAteLpG1U1Ic7blcc-Syg6cNFDwsRA440wtsf1w_YKeVYNrViAsVDYRu4WEd9AD8mH6q8HcuTAfCsbf3n2tjSa9_wAuJhAAAMQAAAAAAAAA",
                        "timestamp": "2024-12-17T11:53:13.014058672"
                      },
                      "errors": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "servers": [
          {
            "url": "https://api-internal.dev1.mosip.net/v1/partnermanager",
            "description": "Partner Management Service"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "RequestWrapperSecureBiometricInterfaceCreateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "requesttime": {
            "type": "string",
            "description": "Current date time in ISO format, when request is being sent.",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the request"
          },
          "request": {
            "$ref": "#/components/schemas/SecureBiometricInterfaceCreateDto"
          }
        },
        "required": [
          "request"
        ]
      },
      "SecureBiometricInterfaceCreateDto": {
        "type": "object",
        "properties": {
          "swBinaryHash": {
            "type": "string",
            "minLength": 1,
            "maxLength": 36
          },
          "swVersion": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          },
          "swCreateDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "swExpiryDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "providerId": {
            "type": "string"
          }
        },
        "required": [
          "swBinaryHash",
          "swVersion",
          "providerId"
        ]
      },
      "ResponseWrapperIdDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "responsetime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object"
          },
          "response": {
            "$ref": "#/components/schemas/IdDto"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "response"
        ]
      },
      "IdDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Aray of error code and message indicating the error that has occured",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "Unique code of the error indicating the error that has occured"
          },
          "message": {
            "type": "string",
            "description": "Message indicating the error that has occured"
          }
        }
      },
      "RequestWrapperSecureBiometricInterfaceStatusUpdateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "requesttime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object"
          },
          "request": {
            "$ref": "#/components/schemas/SecureBiometricInterfaceStatusUpdateDto"
          }
        },
        "required": [
          "request"
        ]
      },
      "SecureBiometricInterfaceStatusUpdateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 36
          },
          "approvalStatus": {
            "type": "string",
            "minLength": 1,
            "maxLength": 36
          }
        },
        "required": [
          "id",
          "approvalStatus"
        ]
      },
      "ResponseWrapperString": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "responsetime": {
            "type": "string",
            "description": "The date time of the response in ISO format",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "response": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "response"
        ]
      },
      "sbiId": {
        "type": "string",
        "description": "Unique identifier of the SBI"
      },
      "sbiVersion": {
        "type": "string",
        "description": "Version of the SBI"
      },
      "RequestWrapperDeviceFilterValueDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "requesttime": {
            "type": "string",
            "description": "Current date time in ISO format, when request is being sent.",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "request": {
            "$ref": "#/components/schemas/DeviceFilterValueDto"
          }
        },
        "required": [
          "request"
        ]
      },
      "DeviceFilterValueDto": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterDto"
            }
          },
          "optionalFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchFilter"
            }
          },
          "purpose": {
            "type": "string",
            "enum": [
              "REGISTRATION",
              "AUTH"
            ]
          }
        },
        "required": [
          "filters"
        ]
      },
      "FilterDto": {
        "type": "object",
        "properties": {
          "columnName": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "columnName",
          "type"
        ]
      },
      "SearchFilter": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fromValue": {
            "type": "string"
          },
          "toValue": {
            "type": "string"
          },
          "columnName": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ResponseWrapperFilterResponseCodeDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "responsetime": {
            "type": "string",
            "description": "The date time of the response in ISO format",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "response": {
            "$ref": "#/components/schemas/FilterResponseCodeDto"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "response"
        ]
      },
      "FilterResponseCodeDto": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnCodeValue"
            }
          }
        }
      },
      "ColumnCodeValue": {
        "type": "object",
        "properties": {
          "fieldID": {
            "type": "string"
          },
          "fieldValue": {
            "type": "string"
          },
          "fieldCode": {
            "type": "string"
          }
        }
      },
      "RequestWrapperPartnerRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "requesttime": {
            "type": "string",
            "description": "Current date time in ISO format, when request is being sent.",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "request": {
            "$ref": "#/components/schemas/PartnerRequest"
          }
        },
        "required": [
          "request"
        ]
      },
      "PartnerRequest": {
        "type": "object",
        "properties": {
          "partnerId": {
            "type": "string"
          },
          "policyGroup": {
            "type": "string"
          },
          "organizationName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          },
          "address": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          "contactNumber": {
            "type": "string",
            "minLength": 1,
            "maxLength": 16
          },
          "emailId": {
            "type": "string",
            "minLength": 1,
            "maxLength": 254
          },
          "partnerType": {
            "type": "string"
          },
          "langCode": {
            "type": "string"
          }
        },
        "required": [
          "partnerId",
          "organizationName",
          "address",
          "contactNumber",
          "emailId",
          "partnerType"
        ]
      },
      "ResponseWrapperPartnerResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "responsetime": {
            "type": "string",
            "description": "The date time of the response in ISO format",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "response": {
            "$ref": "#/components/schemas/PartnerResponse"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "response"
        ]
      },
      "PartnerResponse": {
        "type": "object",
        "properties": {
          "partnerId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "RequestWrapperAPIkeyStatusUpdateRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "requesttime": {
            "type": "string",
            "description": "Current date time in ISO format, when request is being sent.",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "request": {
            "$ref": "#/components/schemas/APIkeyStatusUpdateRequestDto"
          }
        },
        "required": [
          "request"
        ]
      },
      "APIkeyStatusUpdateRequestDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "label",
          "status"
        ]
      },
      "ResponseWrapperOriginalCertDownloadResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id that is required to access this endpoint.\r\n`mosip.pms.original.partner.certificate.get`"
          },
          "version": {
            "type": "string",
            "description": "Version of this endpoint. \r\n`1.0`"
          },
          "responseTime": {
            "type": "string",
            "description": "The date time of the response in ISO format",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "response": {
            "$ref": "#/components/schemas/OriginalCertDownloadResponseDto"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "id",
          "version",
          "response"
        ],
        "x-examples": {}
      },
      "OriginalCertDownloadResponseDto": {
        "type": "object",
        "properties": {
          "caSignedCertificateData": {
            "type": "string",
            "description": "The original CA signed certificate uploaded by the partner"
          },
          "isCaSignedCertificateExpired": {
            "type": "boolean",
            "description": "Flag indicating if CA signed certificate has expired or not"
          },
          "mosipSignedCertificateData": {
            "type": "string",
            "description": "The MOSIP signed certificate generated by PMS "
          },
          "isMosipSignedCertificateExpired": {
            "type": "boolean",
            "description": "Flag indicating if MOSIP signed certificate has expired or not"
          }
        }
      },
      "RequestWrapperPartnerPolicyMappingRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "requesttime": {
            "type": "string",
            "description": "Current date time in ISO format, when request is being sent.",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "request": {
            "$ref": "#/components/schemas/PartnerPolicyMappingRequest"
          }
        },
        "required": [
          "request"
        ]
      },
      "PartnerPolicyMappingRequest": {
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string"
          },
          "useCaseDescription": {
            "type": "string"
          }
        },
        "required": [
          "policyName",
          "useCaseDescription"
        ]
      },
      "ResponseWrapperPartnerPolicyMappingResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "responsetime": {
            "type": "string",
            "description": "The date time of the response in ISO format",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "response": {
            "$ref": "#/components/schemas/PartnerPolicyMappingResponseDto"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "response"
        ]
      },
      "PartnerPolicyMappingResponseDto": {
        "type": "object",
        "properties": {
          "mappingkey": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "RequestWrapperSearchDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "requesttime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object"
          },
          "request": {
            "$ref": "#/components/schemas/SearchDto"
          }
        },
        "required": [
          "request"
        ]
      },
      "SearchDto": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchFilter"
            }
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchSort"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "SearchSort": {
        "type": "object",
        "properties": {
          "sortField": {
            "type": "string"
          },
          "sortType": {
            "type": "string"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "pageStart": {
            "type": "integer",
            "format": "int32"
          },
          "pageFetch": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ResponseWrapperPageResponseDtoPartnerType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "responsetime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object"
          },
          "response": {
            "$ref": "#/components/schemas/PageResponseDtoPartnerType"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "response"
        ]
      },
      "PageResponseDtoPartnerType": {
        "type": "object",
        "properties": {
          "fromRecord": {
            "type": "integer",
            "format": "int64"
          },
          "toRecord": {
            "type": "integer",
            "format": "int64"
          },
          "totalRecord": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerType"
            }
          }
        }
      },
      "PartnerType": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "crBy": {
            "type": "string"
          },
          "crDtimes": {
            "type": "string",
            "format": "date-time"
          },
          "delDtimes": {
            "type": "string",
            "format": "date-time"
          },
          "isActive": {
            "type": "boolean"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "partnerDescription": {
            "type": "string"
          },
          "updBy": {
            "type": "string"
          },
          "updDtimes": {
            "type": "string",
            "format": "date-time"
          },
          "isPolicyRequired": {
            "type": "boolean"
          }
        }
      },
      "RequestWrapperAPIKeyGenerateRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "requesttime": {
            "type": "string",
            "description": "Current date time in ISO format, when request is being sent.",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "request": {
            "$ref": "#/components/schemas/APIKeyGenerateRequestDto"
          }
        },
        "required": [
          "request"
        ]
      },
      "APIKeyGenerateRequestDto": {
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        },
        "required": [
          "policyName",
          "label"
        ]
      },
      "ResponseWrapperAPIKeyGenerateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "responsetime": {
            "type": "string",
            "description": "The date time of the response in ISO format",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "response": {
            "$ref": "#/components/schemas/APIKeyGenerateResponseDto"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "response"
        ]
      },
      "APIKeyGenerateResponseDto": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "policyId": {
            "type": "string"
          },
          "partnerId": {
            "type": "string"
          }
        }
      },
      "RequestWrapperStatusRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "requesttime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object"
          },
          "request": {
            "$ref": "#/components/schemas/StatusRequestDto"
          }
        },
        "required": [
          "request"
        ]
      },
      "StatusRequestDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "RequestWrapperSbiAndDeviceMappingRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "`mosip.pms.add.device.to.sbi.id.post`"
          },
          "version": {
            "type": "string",
            "description": "Version of this endpoint. \r\n`1.0`"
          },
          "requestTime": {
            "type": "string",
            "description": "Current date time in ISO format, when request is being sent.",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "request": {
            "$ref": "#/components/schemas/SbiAndDeviceMappingRequestDto"
          }
        },
        "required": [
          "id",
          "version",
          "request"
        ],
        "x-examples": {}
      },
      "SbiAndDeviceMappingRequestDto": {
        "type": "object",
        "properties": {
          "partnerId": {
            "type": "string",
            "description": "Unique identifier for the partner",
            "example": "partner123"
          },
          "sbiId": {
            "type": "string",
            "description": "Unique identifier for the SBI",
            "example": "sbi456"
          },
          "deviceDetailId": {
            "type": "string",
            "description": "Unique identifier for the device details",
            "example": "device789"
          }
        }
      },
      "ResponseWrapperListCertificateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id that is required to access this endpoint.\r\n`mosip.pms.partner.certificates.get`"
          },
          "version": {
            "type": "string",
            "description": "Version of this endpoint. \r\n`1.0`"
          },
          "responseTime": {
            "type": "string",
            "description": "The date time of the response in ISO format",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CertificateDto"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "id",
          "version",
          "response"
        ],
        "x-examples": {
          "Example 1": {
            "id": "string",
            "version": "string",
            "responseTime": "2019-08-24T14:15:22Z",
            "metadata": {},
            "response": [
              {
                "certificateName": "string",
                "certificateUploadDate": "2019-08-24T14:15:22Z",
                "certificateExpiryDate": "2019-08-24T14:15:22Z",
                "partnerType": "string",
                "partnerId": "string",
                "isCertificateAvailable": true
              }
            ],
            "errors": [
              {
                "errorCode": "string",
                "message": "string"
              }
            ]
          }
        }
      },
      "CertificateDto": {
        "type": "object",
        "properties": {
          "partnerType": {
            "type": "string",
            "description": "Identifier for Partner Type"
          },
          "partnerId": {
            "type": "string",
            "description": "Unique identifier for Partner "
          },
          "isCertificateAvailable": {
            "type": "boolean",
            "description": "Flag indicating if certificate is available or not"
          },
          "certificateIssuedTo": {
            "type": "string",
            "description": "Value indicating \"Certificate Issued To\" field. This will be the Common Name of the Issued To field."
          },
          "certificateUploadDateTime": {
            "type": "string",
            "description": "Date in ISO format indicating date time when certificate was uploaded by the partner",
            "format": "date-time"
          },
          "certificateExpiryDateTime": {
            "type": "string",
            "description": "Date in ISO format indicating date time when certificate will get expired",
            "format": "date-time"
          },
          "isPartnerActive": {
            "type": "boolean",
            "description": "Flag indicating if Partner is Active or not"
          }
        }
      },
      "ResponseWrapperListPolicyGroupDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id that is required to access this endpoint.\r\n`mosip.pms.api.id.partners.v4.get`"
          },
          "version": {
            "type": "string",
            "description": "Version of this endpoint. \r\n`1.0`"
          },
          "responseTime": {
            "type": "string",
            "description": "The date time of the response in ISO format",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyGroupDto"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "id",
          "version",
          "response"
        ]
      },
      "PolicyGroupDto": {
        "type": "object",
        "properties": {
          "partnerId": {
            "type": "string",
            "description": "Unique identifier of Partner"
          },
          "partnerType": {
            "type": "string",
            "description": "Identifier for Partner Type"
          },
          "policyGroupId": {
            "type": "string",
            "description": "Unique identifier of Policy Group. In case policy group is not available then value for this attribute will be null."
          },
          "policyGroupName": {
            "type": "string",
            "description": "Policy Group Name. In case policy group is not available then value for this attribute will be null."
          },
          "policyGroupDescription": {
            "type": "string",
            "description": "Policy Group Description. In case policy group is not available then value for this attribute will be null."
          }
        }
      },
      "ResponseWrapperListApprovedPolicyDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id required to access this endpoint `mosip.pms.auth.partners.policies.get`"
          },
          "version": {
            "type": "string",
            "description": "Version of this endpoint. \r\n`1.0`"
          },
          "responseTime": {
            "type": "string",
            "description": "Date in ISO format indicating date time when response was sent",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivePolicyDto"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "id",
          "version",
          "responseTime",
          "response"
        ]
      },
      "ActivePolicyDto": {
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "Name of the Policy"
          },
          "policyId": {
            "type": "string",
            "description": "Unique identifier of the Policy "
          },
          "policyDescription": {
            "type": "string",
            "description": "Description of the Policy"
          }
        }
      },
      "RequestWrapperDeactivateSbiRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id required to invoke this endpoint.\r\n`mosip.pms.deactivate.sbi.patch`"
          },
          "version": {
            "type": "string",
            "description": "Version of this endpoint. \r\n`1.0`"
          },
          "requestTime": {
            "type": "string",
            "description": "Current date time in ISO format, when request is being sent.",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "request": {
            "$ref": "#/components/schemas/DeactivateSbiRequestDto"
          }
        },
        "required": [
          "id",
          "version",
          "request"
        ]
      },
      "DeactivateSbiRequestDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Activate",
              "De-Activate"
            ],
            "description": "Status to Activate or Deactivate the SBI"
          }
        }
      },
      "ResponseWrapperSbiDetailsResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id required to invoke this endpoint.\r\n`mosip.pms.deactivate.sbi.patch`"
          },
          "version": {
            "type": "string",
            "description": "Version of this endpoint. \r\n`1.0`"
          },
          "responseTime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "response": {
            "$ref": "#/components/schemas/SbiDetailsResponseDto"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "id",
          "version",
          "response"
        ]
      },
      "SbiDetailsResponseDto": {
        "type": "object",
        "properties": {
          "sbiId": {
            "type": "string",
            "description": "Unique identifier of SBI"
          },
          "sbiVersion": {
            "type": "string",
            "description": "Version of SBI"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending_approval",
              "approved",
              "rejected"
            ],
            "description": "Status of SBI"
          },
          "isActive": {
            "type": "boolean",
            "description": "True indicates that SBI is active"
          }
        }
      },
      "ResponseWrapperListFtmProviderDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id that is required to access this endpoint.\r\n`mosip.pms.all.ftm.provider.details.get`."
          },
          "version": {
            "type": "string",
            "description": "Version of this endpoint. \r\n`1.0`"
          },
          "responseTime": {
            "type": "string",
            "description": "The date time of the response in ISO format",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FtmProviderDetailsDto"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "id",
          "version",
          "response"
        ]
      },
      "FtmProviderDetailsDto": {
        "type": "object",
        "description": "Array of objects with all FTM Chip details like make model etc",
        "properties": {
          "ftmId": {
            "type": "string",
            "description": "Unique identifier for the FTM Chip details added by the partner",
            "example": "ftp-001"
          },
          "partnerId": {
            "type": "string",
            "description": "Unique identifier for the partner",
            "example": "partner123"
          },
          "make": {
            "type": "string",
            "description": "Make of the FTM chip",
            "example": "make-123"
          },
          "model": {
            "type": "string",
            "description": "Model of the FTM chip",
            "example": "model-123"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending_approval",
              "approved",
              "rejected",
              "pending_cert_upload"
            ],
            "description": "Current status of the FTM chip details added by the partner.",
            "example": "pending_approval"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates whether the FTM chip details is active (true if active, false otherwise)",
            "example": false
          },
          "isCertificateAvailable": {
            "type": "boolean",
            "description": "Indicates whether the FTM Chip certificate is available (true if available, false otherwise)",
            "example": true
          },
          "isCertificateExpired": {
            "type": "boolean",
            "description": "Indicates whether the FTM certificate is expired (true if expired, false otherwise)",
            "example": false
          },
          "createdDateTime": {
            "type": "string",
            "description": "Date and time in ISO format indicating when the FTM Chip details were added by the partner",
            "format": "date-time"
          },
          "certificateUploadDateTime": {
            "type": "string",
            "description": "Date and time in ISO format indicating when the FTM Chip certificate was uploaded. \r\nIt will be null in case certificate is not yet uploaded.",
            "format": "date-time"
          },
          "certificateExpiryDateTime": {
            "type": "string",
            "description": "Date and time in ISO format indicating when the FTM Chip certificate will expire.\r\nIt will be null in case certificate is not yet uploaded.",
            "format": "date-time"
          },
          "partnerStatus": {
            "type": "string",
            "enum": [
              "approved",
              "rejected",
              "InProgress",
              "deactivated"
            ],
            "description": "Status of the partner"
          }
        }
      },
      "RequestWrapperFtpChipDetailDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "requesttime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object"
          },
          "request": {
            "$ref": "#/components/schemas/FtpChipDetailDto"
          }
        },
        "required": [
          "request"
        ]
      },
      "FtpChipDetailDto": {
        "type": "object",
        "properties": {
          "ftpProviderId": {
            "type": "string",
            "minLength": 1,
            "maxLength": 36
          },
          "make": {
            "type": "string",
            "minLength": 1,
            "maxLength": 36
          },
          "model": {
            "type": "string",
            "minLength": 1,
            "maxLength": 36
          }
        },
        "required": [
          "ftpProviderId",
          "make",
          "model"
        ]
      },
      "RequestWrapperFtpChipDetailStatusDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "requesttime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object"
          },
          "request": {
            "$ref": "#/components/schemas/FtpChipDetailStatusDto"
          }
        },
        "required": [
          "request"
        ]
      },
      "FtpChipDetailStatusDto": {
        "type": "object",
        "properties": {
          "ftpChipDetailId": {
            "type": "string",
            "minLength": 1,
            "maxLength": 36
          },
          "approvalStatus": {
            "type": "boolean"
          }
        },
        "required": [
          "ftpChipDetailId",
          "approvalStatus"
        ]
      },
      "RequestWrapperFtpChipCertificateRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "requesttime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object"
          },
          "request": {
            "$ref": "#/components/schemas/FtpChipCertificateRequestDto"
          }
        },
        "required": [
          "request"
        ]
      },
      "FtpChipCertificateRequestDto": {
        "type": "object",
        "properties": {
          "ftpProviderId": {
            "type": "string"
          },
          "ftpChipDeatilId": {
            "type": "string"
          },
          "isItForRegistrationDevice": {
            "type": "boolean"
          },
          "certificateData": {
            "type": "string"
          },
          "organizationName": {
            "type": "string"
          },
          "partnerDomain": {
            "type": "string"
          }
        },
        "required": [
          "ftpProviderId",
          "ftpChipDeatilId",
          "isItForRegistrationDevice",
          "certificateData",
          "organizationName",
          "partnerDomain"
        ]
      },
      "ResponseWrapperFtpCertificateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "responsetime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object"
          },
          "response": {
            "$ref": "#/components/schemas/FtpCertificateResponseDto"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "response"
        ]
      },
      "FtpCertificateResponseDto": {
        "type": "object",
        "properties": {
          "signedCertificateData": {
            "type": "string"
          },
          "certificateId": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RequestWrapperDeactivateDeviceRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier required to call this endpoint. \r\n`mosip.pms.deactivate.device.patch`"
          },
          "version": {
            "type": "string",
            "description": "Version of this endpoint. \r\n`1.0`"
          },
          "requestTime": {
            "type": "string",
            "description": "Current date time in ISO format, when request is being sent.",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the request"
          },
          "request": {
            "$ref": "#/components/schemas/DeactivateDeviceRequestDto"
          }
        },
        "required": [
          "id",
          "version",
          "request"
        ],
        "x-examples": {}
      },
      "DeactivateDeviceRequestDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Activate",
              "De-Activate"
            ],
            "description": "Status to Activate or Deactivate the Device"
          }
        }
      },
      "ResponseWrapperDeviceDetailResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier required to call this endpoint. \r\n`mosip.pms.deactivate.device.patch`"
          },
          "version": {
            "type": "string",
            "description": "Version of this endpoint. \r\n`1.0`"
          },
          "responseTime": {
            "type": "string",
            "description": "Date time in ISO format, when response is being sent.",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "response": {
            "$ref": "#/components/schemas/DeviceDetailResponseDto"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "id",
          "version",
          "responseTime",
          "response"
        ],
        "x-examples": {}
      },
      "DeviceDetailResponseDto": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string",
            "description": "Unique identifier of Device"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending_approval",
              "approved",
              "rejected"
            ],
            "description": "Status of the Device. "
          },
          "isActive": {
            "type": "boolean",
            "description": "True indicates that the Device is active."
          }
        }
      },
      "ResponseWrapperMapStringString": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier required to access this endpoint.\r\n`mosip.pms.configs.get`"
          },
          "version": {
            "type": "string",
            "description": "Version of this endpoint. \r\n`1.0`"
          },
          "responseTime": {
            "type": "string",
            "description": "The date time of the response in ISO format",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "response": {
            "type": "object",
            "description": "Example\r\n`{\r\n    \"maxAllowedyear\": \"\",\r\n    \"grantTypes\": \"\",\r\n    \"axiosTimeout\": \"\",\r\n    \"inActivityTimer\": \"\",\r\n    \"inActivityPromptTimer\": \"\",\r\n    \"clientAuthMethods\": \"\"\r\n}`",
            "additionalProperties": {
              "type": "string"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "id",
          "version",
          "response"
        ]
      },
      "ResponseWrapperUserDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id that is required to access this endpoint.\r\n`mosip.pms.user.consent.get`"
          },
          "version": {
            "type": "string",
            "description": "Version of this endpoint. \r\n`1.0`"
          },
          "responseTime": {
            "type": "string",
            "description": "The date time of the response in ISO format",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata about the response"
          },
          "response": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string",
                "description": "Unique identifier of the logged in user"
              },
              "consentGiven": {
                "type": "boolean",
                "description": "Flag indicating if the user has given the consent to PMS or not"
              },
              "consentGivenDateTime": {
                "type": "string",
                "description": "Date time in ISO format indicating when consent was given",
                "format": "date-time"
              }
            }
          },
          "errors": {
            "type": "array",
            "description": "Optional array of error codes and messages",
            "items": {
              "type": "object",
              "properties": {
                "errorCode": {
                  "type": "string",
                  "description": "Unique identifier of the error that occured while processing the request"
                },
                "message": {
                  "type": "string",
                  "description": "Message with details about the error that occured while processing the request"
                }
              }
            }
          }
        },
        "required": [
          "id",
          "version",
          "response"
        ],
        "x-examples": {}
      },
      "RequestWrapperEmailVerificationRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string",
            "description": "Version of this endpoint. \r\n`1.0`"
          },
          "requesttime": {
            "type": "string",
            "description": "Current date time in ISO format, when request is being sent.",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata"
          },
          "request": {
            "$ref": "#/components/schemas/EmailVerificationRequestDto"
          }
        },
        "required": [
          "request"
        ]
      },
      "EmailVerificationRequestDto": {
        "type": "object",
        "properties": {
          "emailId": {
            "type": "string"
          }
        }
      },
      "ResponseWrapperEmailVerificationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "responsetime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata"
          },
          "response": {
            "$ref": "#/components/schemas/EmailVerificationResponseDto"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "response"
        ]
      },
      "EmailVerificationResponseDto": {
        "type": "object",
        "properties": {
          "emailExists": {
            "type": "boolean"
          },
          "policyRequiredPartnerTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RequestWrapperCACertificateRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "requesttime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object"
          },
          "request": {
            "$ref": "#/components/schemas/CACertificateRequestDto"
          }
        },
        "required": [
          "request"
        ]
      },
      "CACertificateRequestDto": {
        "type": "object",
        "properties": {
          "certificateData": {
            "type": "string"
          },
          "partnerDomain": {
            "type": "string"
          }
        },
        "required": [
          "certificateData",
          "partnerDomain"
        ]
      },
      "ResponseWrapperCACertificateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "responsetime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object"
          },
          "response": {
            "$ref": "#/components/schemas/CACertificateResponseDto"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "response"
        ]
      },
      "CACertificateResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RequestWrapperPartnerCertificateUploadRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string",
            "description": "Version of this endpoint. \r\n`1.0`"
          },
          "requesttime": {
            "type": "string",
            "description": "Current date time in ISO format, when request is being sent.",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata"
          },
          "request": {
            "$ref": "#/components/schemas/PartnerCertificateUploadRequestDto"
          }
        },
        "required": [
          "request"
        ]
      },
      "PartnerCertificateUploadRequestDto": {
        "type": "object",
        "properties": {
          "partnerId": {
            "type": "string"
          },
          "certificateData": {
            "type": "string"
          },
          "partnerDomain": {
            "type": "string"
          }
        },
        "required": [
          "partnerId",
          "certificateData",
          "partnerDomain"
        ]
      },
      "ResponseWrapperPartnerCertificateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "responsetime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata"
          },
          "response": {
            "$ref": "#/components/schemas/PartnerCertificateResponseDto"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "response"
        ]
      },
      "PartnerCertificateResponseDto": {
        "type": "object",
        "properties": {
          "signedCertificateData": {
            "type": "string"
          },
          "certificateId": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RequestWrapperClientDetailCreateRequestV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string",
            "description": "Version of this endpoint. \r\n`1.0`"
          },
          "requesttime": {
            "type": "string",
            "description": "Current date time in ISO format, when request is being sent.",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata"
          },
          "request": {
            "$ref": "#/components/schemas/ClientDetailCreateRequestV2"
          }
        },
        "required": [
          "request"
        ]
      },
      "ClientDetailCreateRequestV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "policyId": {
            "type": "string",
            "minLength": 1,
            "maxLength": 36
          },
          "publicKey": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "authPartnerId": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "logoUri": {
            "type": "string",
            "maxLength": 2048
          },
          "redirectUris": {
            "type": "array",
            "minItems": 1,
            "maxItems": 5,
            "items": {
              "type": "string"
            }
          },
          "grantTypes": {
            "type": "array",
            "minItems": 1,
            "maxItems": 3,
            "items": {
              "type": "string"
            }
          },
          "clientAuthMethods": {
            "type": "array",
            "minItems": 1,
            "maxItems": 3,
            "items": {
              "type": "string"
            }
          },
          "clientNameLangMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "policyId",
          "publicKey",
          "authPartnerId",
          "logoUri",
          "redirectUris",
          "grantTypes",
          "clientAuthMethods",
          "clientNameLangMap"
        ]
      },
      "ResponseWrapperClientDetailResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "responsetime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata"
          },
          "response": {
            "$ref": "#/components/schemas/ClientDetailResponse"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "response"
        ]
      },
      "ClientDetailResponse": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "ResponseWrapperClientDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "responsetime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object"
          },
          "response": {
            "$ref": "#/components/schemas/ClientDetail"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "response"
        ]
      },
      "ClientDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "policyId": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "relyingPartyId": {
            "type": "string"
          },
          "logoUri": {
            "type": "string"
          },
          "redirectUris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "publicKey": {
            "type": "string"
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "acrValues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          },
          "grantTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientAuthMethods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RequestWrapperClientDetailUpdateRequestV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "requesttime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object"
          },
          "request": {
            "$ref": "#/components/schemas/ClientDetailUpdateRequestV2"
          }
        },
        "required": [
          "request"
        ]
      },
      "ClientDetailUpdateRequestV2": {
        "type": "object",
        "properties": {
          "logoUri": {
            "type": "string",
            "maxLength": 2048
          },
          "redirectUris": {
            "type": "array",
            "minItems": 1,
            "maxItems": 5,
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "pattern": "(ACTIVE)|(INACTIVE)"
          },
          "grantTypes": {
            "type": "array",
            "minItems": 1,
            "maxItems": 3,
            "items": {
              "type": "string"
            }
          },
          "clientName": {
            "type": "string"
          },
          "clientAuthMethods": {
            "type": "array",
            "minItems": 1,
            "maxItems": 3,
            "items": {
              "type": "string"
            }
          },
          "clientNameLangMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "logoUri",
          "redirectUris",
          "status",
          "grantTypes",
          "clientName",
          "clientAuthMethods",
          "clientNameLangMap"
        ]
      },
      "ResponseWrapperMosipUserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "responsetime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata"
          },
          "response": {
            "$ref": "#/components/schemas/MosipUserDto"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "response"
        ]
      },
      "MosipUserDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "mail": {
            "type": "string"
          },
          "langCode": {
            "type": "string"
          },
          "userPassword": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "rid": {
            "type": "string"
          }
        }
      },
      "ResponseWrapperPartnersPolicyMappingResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "responsetime": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object"
          },
          "response": {
            "$ref": "#/components/schemas/PartnersPolicyMappingResponse"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "required": [
          "response"
        ]
      },
      "PartnersPolicyMappingResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}